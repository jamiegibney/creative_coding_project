var searchIndex = JSON.parse('{\
"creative_coding_project":{"doc":"","t":"AAAAAAAAADLAMMMMLLLMMLLLLLLLLLLMAMMMLLMLLMLMMMLMMMMMAMMAMMMMMMFMMMMLLLLLMMALLLLLLLMAMMMMMLCRAAACADLLLLLLLLLLLLLMMMMLLLLLMMLDCLALLMAALLMLLLMLLLLLMLLLLLLMLAMLMLMLLLLLLLLLMLRRRFDDLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLMMLLLMMLLLLLLLLLLLLDDDDDDDLLLLLLLMMMLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLMMMLLLLLLLMMMMMMMMLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLMDLLLMMMMLLLMMMLLMMLMLLMMMMLLMMMMMMMMMMMMMMMMMMLLLLLMLFCCCCCAAEDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMNNDEDLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMLLLLLLLLLLLLMMMLLLLLLLLLMLMMLLLLLLLLLLLLLLLLLLLLLLMLLLFCAAAADLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNNNNNNNNRRRRREELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLISSSSSDSSLLLLLLLLLLLLKLLLLLLNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAANNNEEENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNEENEEENNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLMMMMMMMLLLMMMLLMMLMLLLMMMMLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLMMMMLFFCCCCCCCCCCCCCCCCCCCCCCCCCCCCCAAAAAAAAACCCAAARDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCAADLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLCAADDENNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNRNIENNNNNNLLALLLLALLLLLLAALLLLLAKAAALLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMLLLLMLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAIDDLLLLLLLLLLLLLLLLKLLLLLLKLLKLLLLLLKLLKLLKLLKLLLLKLLKLLKLLLLLLLLLLLLLLKLLKLLDDLLMLLLLLLLLMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLCADLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCADLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAASSSDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLMLLLLLLLLLLLLLMMMLLLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAADENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCADLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAADLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCAADLLLLLLLLLLLLLLLLALLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCAADLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIKKKKCICCCAAKLCCCCCAAAAADLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLENNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLCCCCCAAAADLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKLLDLLLLLLLLLLLLLLLLLLLLMLLMLLLLLLLLDNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRRCCCCCCAAAADCLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLMMFLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLCADLLLLLLLLLLLLLLLLLLLLLLLLLAAAAAARRRRRRRRRCNNNNCCCCELLLLALLLLLFLLLLLLLLAAAFALLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKKKDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIDILLLLLLLLLLMLLKLLLLLLLMMMMMMMMKLMLLLLLLLKLFFCCCCCAADLLLLLLLLLLLLLLLLLLLLLRRRRRDGLLLLLLLLLLLLLLMLLLLLLLLLAADLLLLLLLLLLLLMLLMMMMLLMMMMMLLMLLLLLLLLLDDDDDDDDDDDDDLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLSSDDCSSSSSRSSSSSSCSSSSSSRRCGSSSRSSCCCRSCDSSSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRRRRRRRRRRHRHHDRLLLLLLLLLLLLLLLLLFLMMIIKKKKCCCCAACACAAAAIQKKFFFFFFFFFFFFFFFFFFFFNNNNENNLLLLLLLLFFFFFFFLLLLLLLFLLFFFLLLLLLLCCCCAAAQIIKKKKKKKKKKKDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNEDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNELLFFFFFFLLLLLLLLLLLLFFLLLFFFFLLFFFFFFFLLLLLFFLLFFNNNNNNNELLLLLLLLLLLLLLLFFLLFFFFFFFFFFFLLLLLLL","n":["app","dsp","fonts","generative","gui","prelude","settings","simd","util","Model","adapt_into_using","audio","audio_callback_timer","audio_senders","audio_stream","bank_rect","borrow","borrow_mut","build","clicked_outside_of_spectrum","contours","convert_into","convert_unclamped_into","current_sample_idx","deref","deref_mut","draw_filter_line","draw_filter_nodes","draw_log_lines","draw_mask_scan_line","drop","dsp_load","event","filter_indices","filter_points","filter_raw_points","from","from_sample_","high_filter","increment_mask_scan_line","init","input_data","into","log_lines","low_filter","mask_clicked","mask_rect","mask_rect","mask_scan_line_increment","mask_scan_line_pos","mask_thread_pool","mouse_clicked_outside_of_mask","musical","note_handler","octave","params","post_spectrum_analyzer","pre_spectrum_analyzer","pressed_keys","reso_bank_data","reso_bank_push_receiver","reso_bank_reset_receiver","run_app","sample_rate_ref","smooth_life","spectral_mask","spectrum_rect","to_sample_","try_convert_into","try_from","try_into","type_id","ui_components","ui_params","update","update_filter_line","update_filter_nodes","update_filters","update_input_data","update_mask_scan_line_from_mouse","update_vectors","update_voronoi_vectors","vectors_reso_bank","view","voice_event_sender","voronoi_mask","voronoi_reso_bank","voronoi_vectors","voronoi_z","vzip","AudioContext","DSP_LOAD_AVERAGING_SAMPLES","context","model","process","process","voice","AudioContext","adapt_into_using","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fmt","from","from_sample_","init","into","note_channel_receiver","reso_bank_data_output","sample_rate","spectral_mask_output","to_sample_","try_convert_into","try_from","try_into","type_id","voice_event_receiver","voice_event_sender","vzip","AudioModel","AudioParams","adapt_into_using","audio_constructor","borrow","borrow_mut","buffers","builder","components","compute_post_spectrum","compute_pre_spectrum","context","convert_into","convert_unclamped_into","current_sample_idx","data","deref","deref_mut","drop","from","from_sample_","generation","get_sample_rate","get_upsampled_rate","increment_sample_count","init","into","is_idle","message_channels","next_note_event","params","params","process_filters","processors","set_idle_timer","spectrograms","to_sample_","try_convert_into","try_from","try_into","type_id","update_post_fx_processors","update_reso_bank","update_spectral_filter","update_spectral_filter_order","voice_handler","vzip","DEFAULT_GAIN","DEFAULT_SPECTRAL_BLOCK_SIZE","MAX_NUM_RESONATORS","build_audio_model","AudioModelBuilder","AudioPackage","adapt_into_using","adapt_into_using","attach_ui_params","borrow","borrow","borrow_mut","borrow_mut","buffers","build","callback_timer_ref","convert_into","convert_into","convert_unclamped_into","convert_unclamped_into","data","deref","deref","deref_mut","deref_mut","drop","drop","from","from","from_sample_","from_sample_","generation","init","init","into","into","message_channels","model","new","params","processors","sample_rate_ref","spectrum_outputs","to_sample_","to_sample_","try_convert_into","try_convert_into","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","AudioBuffers","AudioData","AudioGeneration","AudioMessageReceivers","AudioMessageSenders","AudioProcessors","AudioSpectrograms","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","amp_envelope","average_load","average_pos","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","callback_time_elapsed","compressor","convert_into","convert_into","convert_into","convert_into","convert_into","convert_into","convert_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","default","default","default","default","default","default","delay","delay_time_ms","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","distortion_algorithm","drive_amount","drive_amount","drop","drop","drop","drop","drop","drop","drop","filter_comb","filter_freq","filter_freq","filter_high","filter_hs_2","filter_low","filter_peak","filter_peak_post","from","from","from","from","from","from","from","from_sample_","from_sample_","from_sample_","from_sample_","from_sample_","from_sample_","from_sample_","generator","high_filter_is_shelf","idle_timer_samples","init","init","init","init","init","init","init","into","into","into","into","into","into","into","is_processing","latency_samples","low_filter_is_shelf","master_gain_buffer","note_event","note_event","oversamplers","oversampling_buffer","oversampling_factor","post_fx_dc_filter","post_fx_spectrogram","post_fx_spectrogram_buffer","pre_fx_dc_filter","pre_fx_spectrogram","pre_fx_spectrogram_buffer","reso_bank_data","reso_bank_root_note","reso_bank_scale","resonator","resonator_bank","resonator_bank_params","resonator_bank_params","resonator_bank_reset_pan","resonator_bank_reset_pan","resonator_bank_reset_pitch","resonator_bank_reset_pitch","sample_rate","sample_timer","spectral_filter","spectral_filter_size","spectral_mask","spectral_mask_post_fx","spectral_mask_post_fx","spectral_mask_post_fx","stereo_delay","to_sample_","to_sample_","to_sample_","to_sample_","to_sample_","to_sample_","to_sample_","try_convert_into","try_convert_into","try_convert_into","try_convert_into","try_convert_into","try_convert_into","try_convert_into","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upsampled_rate","voice_gain","vzip","vzip","vzip","vzip","vzip","vzip","vzip","waveshaper","AudioParams","adapt_into_using","borrow","borrow_mut","comp_attack_ms","comp_ratio","comp_release_ms","comp_thresh","convert_into","convert_unclamped_into","default","delay_feedback","delay_mix","delay_time_ms","deref","deref_mut","dist_amount","dist_type","drop","exciter_osc","from","from_sample_","high_filter_cutoff","high_filter_gain_db","high_filter_is_shelf","high_filter_q","init","into","low_filter_cutoff","low_filter_gain_db","low_filter_is_shelf","low_filter_q","mask_is_post_fx","mask_mix","mask_resolution","master_gain","pre_fx_gain","reso_bank_inharm","reso_bank_mix","reso_bank_pan","reso_bank_quantize","reso_bank_resonator_count","reso_bank_root_note","reso_bank_scale","reso_bank_shift","reso_bank_spread","to_sample_","try_convert_into","try_from","try_into","type_id","use_ping_pong","vzip","process","NoteEvent","NoteHandler","Voice","VoiceEvent","VoiceHandler","note","voice","NoteEvent","NoteHandler","NoteOff","NoteOn","__clone_box","adapt_into_using","adapt_into_using","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","convert_into","convert_into","convert_unclamped_into","convert_unclamped_into","default","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","freq_value","from","from","from_sample_","from_sample_","init","init","into","into","new","next_event","note_value","push_event","timing","to_owned","to_sample_","to_sample_","try_convert_into","try_convert_into","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","note","note","timing","timing","KillAll","ReleaseAll","Voice","VoiceEvent","VoiceHandler","__clone_box","__clone_box","adapt_into_using","adapt_into_using","adapt_into_using","attach_generator_osc","attach_sample_rate_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","convert_into","convert_into","convert_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","curr_generator","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","envelope","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from_sample_","from_sample_","from_sample_","generator","generator_type","id","init","init","init","into","into","into","is_voice_active","kill_active_voices","new","note","process_block","releasing","sample_rate","start_release_for_active_voices","start_release_for_voice","start_voice","terminate_finished_voices","to_owned","to_owned","to_sample_","to_sample_","to_sample_","try_convert_into","try_convert_into","try_convert_into","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_generator","voices","vzip","vzip","vzip","event","Scale","chord","note","rhythm16","scale","ChordGen","adapt_into_using","borrow","borrow_mut","convert_into","convert_unclamped_into","default","deref","deref_mut","drop","from","from_sample_","gen_custom","gen_major","gen_major7","gen_major9","gen_major_add2","gen_major_add4","gen_major_add9","gen_minor","gen_minor7","gen_minor9","gen_minor_add2","gen_minor_add4","gen_minor_add9","gen_sus2","gen_sus4","init","into","invert_random","new","previous_chord","randomise_pitch","spread_voicing","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","A","As","B","C","C0","C1","C2","C3","C4","C5","C6","C7","C8","C9","Cneg1","Cs","D","Ds","E","F","Fs","G","Gs","KEYBOARD_MIDI_NOTES","MAJOR_PENTATONIC_SCALE_INTERVALS","MAJOR_SCALE_INTERVALS","MINOR_PENTATONIC_SCALE_INTERVALS","MINOR_SCALE_INTERVALS","Note","Octave","__clone_box","__clone_box","adapt_into_using","adapt_into_using","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","convert_into","convert_into","convert_unclamped_into","convert_unclamped_into","decrease","decrease_by","default","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","fmt","fmt","from","from","from_key","from_note","from_sample_","from_sample_","from_value","increase","increase_by","init","init","into","into","key_value","midi_note_to_string","midi_note_value_from","note_value","starting_midi_note","to_owned","to_owned","to_sample_","to_sample_","to_string","to_string","transpose","transpose","try_convert_into","try_convert_into","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","BitwiseRhythm16","EIGHTH_NOTE","HALF_DOTTED","HALF_NOTE","QUARTER_DOTTED","QUARTER_NOTE","Rhythm16th","SIXTEENTH_NOTE","WHOLE_NOTE","adapt_into_using","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","from","from_sample_","init","into","is_beat","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","Chromatic","MajPentatonic","Major","MinPentatonic","Minor","Scale","__clone_box","adapt_into_using","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","default","deref","deref_mut","drop","eq","equivalent","equivalent","fmt","fmt","from","from_idx","from_sample_","get","idx","init","into","num_variants","quantize_to_scale","to_owned","to_sample_","to_string","try_convert_into","try_from","try_into","type_id","vzip","types","ui","Contours","Corrupt","Crush","DistortionType","ExciterOscillator","GenerativeAlgo","Hard","Jitter","Noise","None","PostOnly","PreOnly","PrePost","S1024","S1024","S128","S128","S16","S16384","S2048","S2048","S256","S256","S32","S4096","S4096","S512","S512","S64","S64","S8192","S8192","Saw","Sine","Slime","SmoothLife","SmoothLifePreset","SmoothLifeSize","Soft","SpectralFilterSize","SpectrogramSize","SpectrogramView","Square","Tri","Voronoi","Wrap","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","convert_into","convert_into","convert_into","convert_into","convert_into","convert_into","convert_into","convert_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_idx","from_idx","from_idx","from_idx","from_idx","from_idx","from_idx","from_idx","from_sample_","from_sample_","from_sample_","from_sample_","from_sample_","from_sample_","from_sample_","from_sample_","idx","idx","idx","idx","idx","idx","idx","idx","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","num_variants","num_variants","num_variants","num_variants","num_variants","num_variants","num_variants","num_variants","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_sample_","to_sample_","to_sample_","to_sample_","to_sample_","to_sample_","to_sample_","to_sample_","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_convert_into","try_convert_into","try_convert_into","try_convert_into","try_convert_into","try_convert_into","try_convert_into","try_convert_into","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","UIParams","adapt_into_using","borrow","borrow_mut","comp_attack_ms","comp_ratio","comp_release_ms","comp_thresh","contour_count","contour_speed","contour_thickness","convert_into","convert_unclamped_into","default","delay_feedback","delay_mix","delay_time_ms","deref","deref_mut","dist_amount","dist_type","drop","exciter_osc","fmt","from","from_sample_","high_filter_cutoff","high_filter_gain_db","high_filter_is_shelf","high_filter_q","init","into","low_filter_cutoff","low_filter_gain_db","low_filter_is_shelf","low_filter_q","mask_algorithm","mask_is_post_fx","mask_mix","mask_resolution","mask_scan_line_speed","master_gain","pre_fx_gain","reso_bank_cell_count","reso_bank_cell_jitter","reso_bank_field_friction","reso_bank_inharm","reso_bank_mix","reso_bank_pan","reso_bank_quantize","reso_bank_resonator_count","reso_bank_root_note","reso_bank_scale","reso_bank_shift","reso_bank_spread","smoothlife_preset","smoothlife_resolution","smoothlife_speed","spectrogram_resolution","spectrogram_timing","spectrogram_view","to_sample_","try_convert_into","try_from","try_into","type_id","use_ping_pong","voronoi_border_weight","voronoi_cell_count","voronoi_cell_speed","vzip","update","view","AdsrEnvelope","AdsrParameters","BUTTERWORTH_Q","BiquadFilter","BiquadParams","Compressor","DCFilter","Delay","Filter","FilterType","FirCombFilter","FirstOrderFilter","Generator","IirCombFilter","LinkwitzRileyFilter","OnePoleLowpass","Oversampler","OversamplingBuffer","ResoBankData","ResonatorBank","ResonatorBankParams","RingBuffer","SpectralFilter","SpectralMask","StateVariableFilter","StereoDelay","StftHelper","TwoPoleResonator","Waveshaper","delay","distortion","dynamics","filtering","modulation","oversampling","spectral","synthesis","util","Delay","RingBuffer","StereoDelay","delay","ring_buffer","stereo_delay","DEFAULT_DELAY_SMOOTHING","Delay","__clone_box","adapt_into_using","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","default","deref","deref_mut","drop","fmt","from","from_sample_","get_sample_rate","init","into","max_delay_time_secs","new","process_mono","set_delay_time","set_delay_time_samples","set_feedback_amount","set_sample_rate","set_smoothing_time","to_owned","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","with_delay_time","with_delay_time_samples","RingBuffer","__clone_box","adapt_into_using","borrow","borrow_mut","clear","clone","clone_into","convert_into","convert_unclamped_into","default","deref","deref_mut","drop","fmt","from","from_sample_","get_sample_rate","init","into","max_delay_secs","new","push","read","reset","resize","set_delay_time","set_interpolation","set_sample_rate","set_smoothing","size","to_owned","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","with_interpolation","with_smoothing","StereoDelay","__clone_box","adapt_into_using","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","default","deref","deref_mut","drop","fmt","from","from_sample_","get_sample_rate","init","into","max_delay_time_secs","new","ping_pong","process_stereo","set_delay_time","set_delay_time_samples","set_feedback_amount","set_sample_rate","set_smoothing_time","to_owned","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","with_delay_time","with_delay_time_samples","with_ping_pong","Waveshaper","decimation","waveshaper","Decimator","adapt_into_using","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","from","from_sample_","init","into","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","Waveshaper","adapt_into_using","borrow","borrow_mut","convert_into","convert_unclamped_into","default","deref","deref_mut","drop","from","from_sample_","init","into","new","process","set_asymmetric","set_curve","set_curve_range","set_drive","set_drive_lower","set_xfer_function","set_xfer_function_positive_only","set_xfer_function_single_argument","set_xfer_function_single_argument_positive_only","smooth_soft_clip","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","Compressor","adsr","compressor","AdsrEnvelope","AdsrParameters","AdsrStage","Attack","Decay","Idle","Release","Sustain","__clone_box","__clone_box","__clone_box","adapt_into_using","adapt_into_using","adapt_into_using","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","convert_into","convert_into","convert_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","current_value","default","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","from","from","from","from_sample_","from_sample_","from_sample_","get_stage","init","init","init","into","into","into","is_idle","new","next","next_block","next_block_exact","parameters","parameters_mut","reset_sample_rate","set_attack_curve","set_attack_level","set_attack_time_ms","set_decay_curve","set_decay_time_ms","set_parameters","set_release_curve","set_release_time_ms","set_sustain_level","set_trigger","to_owned","to_owned","to_owned","to_sample_","to_sample_","to_sample_","try_convert_into","try_convert_into","try_convert_into","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Compressor","__clone_box","adapt_into_using","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","default","deref","deref_mut","drop","fmt","from","from_sample_","gain_function","get_sample_rate","init","into","new","process_stereo","set_attack_time_ms","set_knee_width","set_ratio","set_release_time_ms","set_threshold_level_db","to_owned","to_sample_","try_convert_into","try_from","try_into","type_id","use_rms","vzip","Allpass","BUTTERWORTH_Q","Bandpass","Filter","FilterType","Highpass","Highshelf","Lowpass","Lowshelf","Notch","Peak","__clone_box","adapt_into_using","biquad","borrow","borrow_mut","clone","clone_into","comb","convert_into","convert_unclamped_into","default","deref","deref_mut","drop","filter_design","first_order","fmt","from","from_sample_","init","into","lrf","process","resonator","simple","svf","to_owned","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","BiquadFilter","BiquadParams","__clone_box","__clone_box","adapt_into_using","adapt_into_using","borrow","borrow","borrow_mut","borrow_mut","bp_notch_bandwidth","bp_notch_half_power_points","clone","clone","clone_into","clone_into","convert_into","convert_into","convert_unclamped_into","convert_unclamped_into","default","default","deref","deref","deref_mut","deref_mut","drop","drop","filter_type","fmt","fmt","force_recompute","freq","from","from","from_sample_","from_sample_","gain","get_sample_rate","init","init","into","into","new","process","q","reset_sample_rate","response_at","set_freq","set_gain","set_params","set_q","set_type","suspend","to_owned","to_owned","to_sample_","to_sample_","try_convert_into","try_convert_into","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","FirCombFilter","IirCombFilter","__clone_box","__clone_box","adapt_into_using","adapt_into_using","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","convert_into","convert_into","convert_unclamped_into","convert_unclamped_into","default","deref","deref","deref_mut","deref_mut","drop","drop","fmt","from","from","from_sample_","from_sample_","init","init","into","into","process","process","reset_sample_rate","reset_sample_rate","set_freq","set_freq","set_gain_db","set_gain_db","set_internal_filters","set_interpolation","set_interpolation","set_positive_polarity","set_positive_polarity","to_owned","to_owned","to_sample_","to_sample_","try_convert_into","try_convert_into","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","with_interpolation","with_interpolation","coefficients","design","Coefficients","FIRCoefficients","IIRCoefficients","adapt_into_using","adapt_into_using","borrow","borrow","borrow_mut","borrow_mut","convert_into","convert_into","convert_unclamped_into","convert_unclamped_into","deref","deref","deref_mut","deref_mut","drop","drop","filter_order","filter_order","filter_order","from","from","from_sample_","from_sample_","get_coefs","get_coefs","get_coefs","get_coefs_mut","get_coefs_mut","get_coefs_mut","init","init","into","into","magnitude_at_freq","magnitude_at_freq","magnitude_at_freq","magnitude_for_freqs","magnitude_for_freqs","magnitude_for_freqs","magnitude_for_freqs_in_place","magnitude_for_freqs_in_place","magnitude_for_freqs_in_place","new","new","new","normalise","normalise","phase_at_freq","phase_at_freq","phase_at_freq","phase_for_freqs","phase_for_freqs","phase_for_freqs","phase_for_freqs_in_place","phase_for_freqs_in_place","phase_for_freqs_in_place","to_sample_","to_sample_","try_convert_into","try_convert_into","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","with_capacity","with_capacity","with_capacity","with_coefs","with_coefs","with_coefs","FilterDesign","IIRHalfBandPolyphaseAllpassStructure","adapt_into_using","adapt_into_using","alpha","borrow","borrow","borrow_mut","borrow_mut","convert_into","convert_into","convert_unclamped_into","convert_unclamped_into","delayed_path","deref","deref","deref_mut","deref_mut","direct_path","drop","drop","fir_half_band_equiripple_method","from","from","from_sample_","from_sample_","iir_half_band_polyphase_allpass_method","init","init","into","into","to_sample_","to_sample_","try_convert_into","try_convert_into","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","FirstOrderFilter","filter","FirstOrderFilter","__clone_box","adapt_into_using","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","default","deref","deref_mut","drop","fmt","from","from_sample_","get_sample_rate","get_sample_rate","identity","init","into","new","process","process_mono","reset","reset_sample_rate","set_freq","set_type","to_owned","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","LinkwitzRileyFilter","filter","LinkwitzRileyFilter","__clone_box","adapt_into_using","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","drop","fmt","from","from_sample_","get_sample_rate","init","into","new","process_high_low","process_stereo","reset","set_cutoff_freq","set_type","to_owned","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","resonator_bank","two_pole_resonator","NOTE_MAX","NOTE_MIDDLE","NOTE_MIN","ResoBankData","ResonatorBank","ResonatorBankParams","__clone_box","__clone_box","__clone_box","adapt_into_using","adapt_into_using","adapt_into_using","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","convert_into","convert_into","convert_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","default","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","freq_shift","freq_spread","from","from","from","from_sample_","from_sample_","from_sample_","get_sample_rate","inharm","init","init","init","inner","inner_mut","into","into","into","max_num_resonators","new","new","original_pitches_mut","pan_values_mut","panning","panning_scale","pitches","process_mono","process_stereo","quantize_to_scale","quantize_to_scale","randomize","root_note","scale","set_freq_shift","set_freq_spread","set_inharm","set_num_resonators","set_panning_scale","set_params","set_root_note","set_scale","set_state_from_data","to_owned","to_owned","to_owned","to_sample_","to_sample_","to_sample_","try_convert_into","try_convert_into","try_convert_into","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","TwoPoleResonator","__clone_box","adapt_into_using","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","default","deref","deref_mut","drop","fmt","from","from_sample_","get_sample_rate","init","into","magnitude_response_at","new","phase_response_at","process","process_mono","sample_rate","set_cutoff","set_resonance","set_sample_rate","to_owned","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","ballistics","dc_filter","one_pole_lowpass","BallisticsFilter","BallisticsLevelType","Peak","Rms","__clone_box","__clone_box","adapt_into_using","adapt_into_using","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","convert_into","convert_into","convert_unclamped_into","convert_unclamped_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","from_sample_","from_sample_","get_sample_rate","init","init","into","into","new","process_stereo","reset","set_attack_time_ms","set_level_type","set_num_channels","set_release_time_ms","to_owned","to_owned","to_sample_","to_sample_","try_convert_into","try_convert_into","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","DCFilter","__clone_box","adapt_into_using","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","default","deref","deref_mut","drop","fmt","from","from_sample_","get_sample_rate","init","into","new","process_mono","set_num_filters","set_sample_rate","to_owned","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","OnePoleLowpass","__clone_box","adapt_into_using","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","drop","fmt","from","from_sample_","get_sample_rate","init","into","new","process_mono","reset","set_cutoff_freq","set_cutoff_time","set_cutoff_time_samples","to_owned","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","StateVariableFilter","filter","StateVariableFilter","__clone_box","adapt_into_using","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","drop","fmt","from","from_sample_","get_sample_rate","init","into","new","process_stereo","reset","set_cutoff_freq","set_num_channels","set_q","set_type","to_owned","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","chorus","flanger","phaser","Chorus","__clone_box","adapt_into_using","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","drop","fmt","from","from_sample_","get_sample_rate","init","into","invert_delay_polarity","new","process_stereo","set_mod_depth","set_mod_rate","to_owned","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","Oversampler","OversamplingBuffer","__clone_box","adapt_into_using","adapt_into_using","borrow","borrow","borrow_mut","borrow_mut","channel","channel_mut","clear","clone","clone_into","convert_into","convert_into","convert_unclamped_into","convert_unclamped_into","copy_from_buffer","copy_to_buffer","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","downsample_to","drop","drop","from","from","from_sample_","from_sample_","init","init","into","into","latency","max_stages","new","new","num_channels","num_samples","process","reset","resize","to_owned","to_sample_","to_sample_","try_convert_into","try_convert_into","try_from","try_from","try_into","try_into","type_id","type_id","upsample_from","upsample_only","vzip","vzip","StftHelper","spectral_filter","stft","SpectralFilter","adapt_into_using","block_size","borrow","borrow_mut","clear","compensation_factor","convert_into","convert_unclamped_into","default","deref","deref_mut","drop","from","from_sample_","init","into","mask","max_block_size","new","process_block","set_block_size","set_mask","set_mix","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","SpectralMask","__clone_box","adapt_into_using","bin_freq","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","default","deref","deref","deref_mut","deref_mut","drop","fmt","from","from_sample_","init","into","max_size","new","set_mask_size","size","to_owned","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","with_size","StftHelper","helper","stft_trait","StftHelper","adapt_into_using","borrow","borrow_mut","clear","convert_into","convert_unclamped_into","deref","deref_mut","drop","from","from_sample_","init","into","latency_samples","max_block_size","max_padding","new","num_channels","process_forward_only","process_overlap_add","set_block_size","set_padding","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","StftInput","StftInputMut","get_sample_unchecked","get_sample_unchecked_mut","num_channels","num_samples","Generator","GeneratorProcessor","NoiseOsc","Phasor","SineOsc","basic","generator","process","set_freq","NoiseOsc","Phasor","SineOsc","SquareOsc","TriOsc","noise_osc","phasor","sine","square","tri","NoiseOsc","__clone_box","adapt_into_using","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","drop","fmt","from","from_sample_","init","into","process","to_owned","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","Phasor","__clone_box","adapt_into_using","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","drop","fmt","from","from_sample_","increment_phase","init","into","new","next","period_length_samples","phase","phase_increment","process","set_freq","to_owned","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","SineOsc","__clone_box","adapt_into_using","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","drop","fmt","from","from_sample_","init","into","new","process","set_freq","to_owned","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","SquareOsc","__clone_box","adapt_into_using","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","drop","fmt","from","from_sample_","init","into","new","process","set_freq","to_owned","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","TriOsc","__clone_box","adapt_into_using","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","drop","fmt","from","from_sample_","init","into","new","process","set_freq","to_owned","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","Generator","Noise","Saw","Sine","Square","Tri","__clone_box","adapt_into_using","borrow","borrow_mut","change_freq","clone","clone_into","convert_into","convert_unclamped_into","default","deref","deref_mut","drop","fmt","from","from_sample_","init","into","process","to_owned","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","AudioUtility","DryWet","Effect","PanningLaw","StereoWrapper","dry_wet","effect_trait","stereo_wrapper","utility","DryWet","__clone_box","adapt_into_using","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","default","deref","deref","deref_mut","deref_mut","drop","fmt","from","from_sample_","get_sample_rate","init","into","new","process_mono","process_stereo","set_dry","set_dry_db","set_mix_equal_gain","set_mix_equal_power","set_wet","set_wet_db","to_owned","to_sample_","try_convert_into","try_from","try_into","type_id","unwrap","vzip","Effect","get_sample_rate","process_mono","process_stereo","StereoWrapper","__clone_box","adapt_into_using","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","default","deref","deref_mut","drop","fmt","from","from_pair","from_sample_","from_single","get_sample_rate","init","into","l","process_mono","process_stereo","r","to_owned","to_sample_","try_convert_into","try_from","try_into","type_id","unwrap","vzip","AudioUtility","ConstantPower","Linear","PanningLaw","__clone_box","__clone_box","adapt_into_using","adapt_into_using","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","convert_into","convert_into","convert_unclamped_into","convert_unclamped_into","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","from_sample_","from_sample_","get_sample_rate","init","init","into","into","invert_left","invert_right","new","process_mono","process_stereo","set_gain","set_gain_db","set_pan","set_panning_law","set_width","swap_stereo","to_owned","to_owned","to_sample_","to_sample_","try_convert_into","try_convert_into","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","BOLD_FONT_MONO_BYTES","MEDIUM_FONT_MONO_BYTES","REGULAR_FONT_MONO_BYTES","Contours","ContoursGPU","SmoothLife","SmoothLifeGPU","Vectors","VoronoiGPU","contours","smooth_life","vectors","voronoi","Contours","ContoursGPU","adapt_into_using","borrow","borrow_mut","column_to_mask","contours_gpu","convert_into","convert_unclamped_into","deref","deref_mut","draw","drop","from","from_sample_","height_px","init","into","new","randomize","rect","set_contour_range","set_feathering","set_num_contours","set_num_threads","set_z_increment","to_sample_","try_convert_into","try_from","try_into","type_id","update","vzip","width_px","with_contour_range","with_feathering","with_num_contours","with_num_threads","with_z_increment","ContoursGPU","adapt_into_using","borrow","borrow_mut","column_to_mask","convert_into","convert_unclamped_into","deref","deref_mut","draw","drop","from","from_sample_","init","into","new","num_contours_arc","randomize","rect","set_contour_range","set_num_contours","set_z_increment","to_sample_","try_convert_into","try_from","try_into","type_id","update","upper_arc","vzip","with_contour_range","with_num_contours","with_z_increment","z_increment_arc","Grid","SLState","SmoothLife","SmoothLifeGPU","SmoothLifeGenerator","SmoothLifeGeneratorAsync","__clone_box","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","alpha_m","alpha_n","b1","b2","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","column_to_mask","column_to_mask","convert_into","convert_into","convert_into","convert_into","convert_into","convert_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","d1","d2","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","draw","draw","drop","drop","drop","drop","drop","drop","dt","fluid","fmt","from","from","from","from","from","from","from_sample_","from_sample_","from_sample_","from_sample_","from_sample_","from_sample_","get_value","get_value_bicubic","get_value_bilinear","get_value_nn","grid","grid","grid","height","init","init","init","init","init","init","into","into","into","into","into","into","is_using_bilinear","new","new","new","new","new","new_square","preset_arc","radius_inner","radius_outer","random_f64","randomize","randomize","randomize_chunk","rect","rect","reset","reset","reset","set_outer_radius","set_outer_radius","set_outer_radius","set_preset","set_resolution","set_speed","set_speed","set_speed","set_state","speed_arc","state","state","state_mut","sync_diff","to_owned","to_sample_","to_sample_","to_sample_","to_sample_","to_sample_","to_sample_","transition","try_convert_into","try_convert_into","try_convert_into","try_convert_into","try_convert_into","try_convert_into","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","update","update","update","update","use_bilinear","value","value_chunk","vzip","vzip","vzip","vzip","vzip","vzip","width","with_random","with_random_chunk","with_value","with_value_chunk","Point","Vectors","__clone_box","__clone_box","adapt_into_using","adapt_into_using","borrow","borrow","borrow_mut","borrow_mut","can_mouse_interact","clone","clone","clone_into","clone_into","contains","convert_into","convert_into","convert_unclamped_into","convert_unclamped_into","deref","deref","deref_mut","deref_mut","draw","drop","drop","fmt","fmt","from","from","from_sample_","from_sample_","init","init","into","into","new","num_active_points","override_points","points","pos","push_points","randomize_deceleration","randomize_points","randomize_velocity","rect","set_friction","set_num_active_points","set_point_color","set_point_radius","set_pos","set_reso_bank_data","set_reso_bank_data_mutex","to_owned","to_owned","to_sample_","to_sample_","try_convert_into","try_convert_into","try_from","try_from","try_into","try_into","type_id","type_id","update","vel","vzip","vzip","with_num_active_points","with_point_color","with_point_radius","VoronoiGPU","general","VoronoiGPU","adapt_into_using","borrow","borrow_mut","column_to_mask","convert_into","convert_unclamped_into","copy_from_vectors","deref","deref_mut","draw","drop","from","from_sample_","init","into","new","rect","set_weight","to_sample_","try_convert_into","try_from","try_into","type_id","update","vzip","colors","components","draw_traits","rdp","spectrum","ui","BG_HOVERED","BG_NON_SELECTED","BG_SELECTED","BIG_LABEL","HOVERED","LABEL","NON_SELECTED","SELECTED","VALUE","Button","Clicked","Disabled","Hovered","Idle","Label","Menu","MenuEnum","TextSlider","UIComponentState","__clone_box","adapt_into_using","borrow","borrow_mut","button","clone","clone_into","convert_into","convert_unclamped_into","default","default_text_layout","deref","deref_mut","drop","fmt","from","from_sample_","init","into","label","menu","menu_trait","str_to_option","text_slider","to_owned","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","Button","adapt_into_using","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","disabled_layout","disabled_layout_mut","draw","drop","enabled","enabled_layout","enabled_layout_mut","from","from_sample_","init","into","label_layout","label_layout_mut","new","rect","set_callback","should_update","to_sample_","toggleable","try_convert_into","try_from","try_into","type_id","update","vzip","with_callback","with_disabled_layout","with_disabled_text","with_enabled_layout","with_enabled_text","with_font_size","with_label","with_label_layout","with_state","Label","adapt_into_using","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","draw","drop","from","from_sample_","init","into","new","rect","set_text","set_text_color","set_text_layout","to_sample_","try_convert_into","try_from","try_into","type_id","update","vzip","with_text","with_text_color","with_text_layout","Menu","adapt_into_using","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","draw","draw_bounding_rect","drop","from","from_sample_","init","initial_variant","into","is_open","item_text_layout","item_text_layout_mut","label_layout","label_layout_mut","new","output","rect","selected_text_layout","selected_text_layout_mut","set_callback","should_update","starts_open","to_sample_","try_convert_into","try_from","try_into","type_id","update","vzip","with_callback","with_font_size","with_item_font_size","with_item_text_layout","with_label","with_label_font_size","with_label_layout","with_selected_item_text_layout","MenuEnum","from_idx","idx","num_variants","TextSlider","adapt_into_using","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","detach_callback","detach_formatting_callback","draw","drop","from","from_sample_","init","into","is_active","label_layout","label_layout_mut","log_scaling","new","rect","set_callback","set_default_value","set_font_size","set_formatting_callback","set_integer_rounding","set_label","set_label_layout","set_max_value_chars","set_output_range","set_positive_prefix","set_prefix","set_sensitivity","set_suffix","set_value","set_value_layout","set_value_num_chars","set_value_raw","should_update","to_sample_","try_convert_into","try_from","try_into","type_id","update","value","value_layout","value_layout_mut","value_raw","vzip","with_callback","with_default_value","with_font_size","with_formatting_callback","with_integer_rounding","with_label","with_label_layout","with_log_scaling","with_max_value_chars","with_output_range","with_positive_value_prefix","with_prefix","with_sensitivity","with_suffix","with_value_chars","with_value_layout","within_bounds","DrawMask","InputData","UIDraw","__clone_box","adapt_into_using","borrow","borrow_mut","clone","clone_into","column_to_mask","convert_into","convert_unclamped_into","default","delta_time","deref","deref_mut","draw","draw_bounding_rect","drop","fmt","from","from_sample_","init","into","is_alt_down","is_ctrl_down","is_left_clicked","is_os_mod_down","is_right_clicked","is_shift_down","is_win_focussed","mouse_pos","rect","row_to_mask","scroll_delta","should_update","to_owned","to_sample_","try_convert_into","try_from","try_into","type_id","update","vzip","decimate_points","rdp_in_place","SPECTRUM_OVERLAP_FACTOR","SPECTRUM_WINDOW_SIZE","SpectrumAnalyzer","SpectrumInput","SpectrumOutput","analyzer","process","SpectrumAnalyzer","adapt_into_using","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","draw","drop","from","from_sample_","init","into","new","rect","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","DEFAULT_SPECTRUM_ATTACK_MS","DEFAULT_SPECTRUM_RELEASE_MS","RESULT_BUFFER_SIZE","SPECTRUM_OVERLAP_FACTOR","SPECTRUM_WINDOW_SIZE","SpectrumInput","SpectrumOutput","adapt_into_using","borrow","borrow_mut","compute","convert_into","convert_unclamped_into","deref","deref_mut","drop","from","from_sample_","init","into","new","num_channels","set_relative_timing","to_sample_","try_convert_into","try_from","try_into","type_id","update_num_channels","update_timing","vzip","components","layout","UIComponents","adapt_into_using","attach_mask_reset_callback","attach_reso_bank_push_callback","attach_reso_bank_randomize_callback","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","draw","drop","exciter_osc","from","from_sample_","high_filter_cutoff","high_filter_gain","high_filter_q","high_filter_type","init","into","low_filter_cutoff","low_filter_gain","low_filter_q","low_filter_type","mask_resolution","new","rect","reso_bank_scale","setup_audio_channels","setup_mask_callbacks","to_sample_","try_convert_into","try_from","try_into","type_id","update","vzip","CompressionUILayout","ContourUILayout","DelayUILayout","DistortionUILayout","HighFilterUILayout","LowFilterUILayout","MaskUILayout","OtherUILayout","ResoBankUILayout","SmoothLifeUILayout","SpectrogramUILayout","UILayout","VoronoiUILayout","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","algorithm","amount","attack","border_weight","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cell_count","cell_count","cell_jitter","cell_speed","compression","contour","convert_into","convert_into","convert_into","convert_into","convert_into","convert_into","convert_into","convert_into","convert_into","convert_into","convert_into","convert_into","convert_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","count","cutoff_hz","cutoff_hz","default","default","default","default","default","default","default","default","default","default","default","default","default","delay","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","dist_type","distortion","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","effects_label","exciter","f_type","f_type","feedback","field_friction","from","from","from","from","from","from","from","from","from","from","from","from","from","from_sample_","from_sample_","from_sample_","from_sample_","from_sample_","from_sample_","from_sample_","from_sample_","from_sample_","from_sample_","from_sample_","from_sample_","from_sample_","gain","gain","high_filter","inharm","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","is_post_fx","label","label","label","label","label","label","label","label","low_filter","mask_general","master_gain","mix","mix","mix","other","pan","pre_fx_gain","preset","push","q","q","quantize","randomise","ratio","release","reset","reso_bank","reso_count","resolution","resolution","resolution","root_note","scale","scan_line_speed","shift","smooth_life","spectrogram","speed","speed","spread","thickness","threshold","time_ms","timing","to_sample_","to_sample_","to_sample_","to_sample_","to_sample_","to_sample_","to_sample_","to_sample_","to_sample_","to_sample_","to_sample_","to_sample_","to_sample_","try_convert_into","try_convert_into","try_convert_into","try_convert_into","try_convert_into","try_convert_into","try_convert_into","try_convert_into","try_convert_into","try_convert_into","try_convert_into","try_convert_into","try_convert_into","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","use_ping_pong","view","voronoi","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AXES","AXES","AtomicF64","DVec2","DrawMask","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","HALF","InputData","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","MINUS_INFINITY_DB","MINUS_INFINITY_GAIN","NoteEvent","NoteHandlerRef","ONE","ONE","ONE","PI","PI","SQRT_2","Scale","SimdBuffer","SimdType","TAU","TAU","UIDraw","Vec2","X","X","Y","Y","ZERO","ZERO","ZERO","__clone_box","__clone_box","__clone_box","abs","abs","abs","abs_diff_eq","abs_diff_eq","acos","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","all","angle","angle_between","angle_between","any","as_array_mut","as_array_ref","as_atomic_bits","as_f32","as_f64","as_i32","as_i32","as_mut","as_mut","as_ref","as_ref","as_u32","as_u32","asin","asin_acos","atan","atan2","average","average","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bitxor","bitxor","bitxor_assign","bitxor_assign","blend","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil","ceil","clamp","clamp","clamp_length","clamp_length","clamp_length_max","clamp_length_max","clamp_length_min","clamp_length_min","clone","clone","clone","clone_into","clone_into","clone_into","cmp_eq","cmp_eq","cmp_ge","cmp_ge","cmp_gt","cmp_gt","cmp_le","cmp_le","cmp_lt","cmp_lt","cmp_ne","cmp_ne","cmpeq","cmpeq","cmpge","cmpge","cmpgt","cmpgt","cmple","cmple","cmplt","cmplt","cmpne","cmpne","compare_and_swap","compare_exchange","compare_exchange_weak","convert_into","convert_into","convert_into","convert_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","convert_unclamped_into","copysign","cos","default","default","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","distance","distance","distance_squared","distance_squared","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dot","dot","drop","drop","drop","drop","eq","eq","eq","exp","exp","exp","extend","extend","f64x4","fast_max","fast_min","fetch_abs","fetch_add","fetch_max","fetch_min","fetch_neg","fetch_sub","fetch_update","flip_signs","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_f32","from_f64","from_sample_","from_sample_","from_sample_","from_sample_","from_slice","from_slice","get_mut","index","index","index_mut","index_mut","init","init","init","init","into","into","into","into","into_inner","is_finite","is_finite","is_finite","is_inf","is_nan","is_nan","is_nan","is_nan_mask","is_nan_mask","is_normalized","is_normalized","is_valid_bit_pattern","length","length","length_recip","length_recip","length_squared","length_squared","lerp","lerp","ln","load","log10","log2","lr","max","max","max","max_element","max_element","min","min","min","min_element","min_element","move_mask","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_neg_add","mul_neg_sub","mul_sub","neg","neg","neg","neg","new","new","new","new","none","normalize","normalize","normalize_or_zero","normalize_or_zero","not","perp","perp","perp_dot","perp_dot","point2","point2","pow_f64x4","powf","powf","powf","product","product","product","project_onto","project_onto","project_onto_normalized","project_onto_normalized","random_f64","random_range","recip","recip","reduce_add","reject_from","reject_from","reject_from_normalized","reject_from_normalized","rotate","round","round","round","round_int","select","select","serialize","serialize","signum","signum","sin","sin_cos","splat","splat","splat","sqrt","sr","store","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","swap","tan","to_array","to_array","to_array","to_degrees","to_owned","to_owned","to_owned","to_radians","to_sample_","to_sample_","to_sample_","to_sample_","to_string","to_string","to_string","try_convert_into","try_convert_into","try_convert_into","try_convert_into","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_normalize","try_normalize","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","write_to_slice","write_to_slice","xx","xx","xxx","xxx","xxxx","xxxx","xxxy","xxxy","xxy","xxy","xxyx","xxyx","xxyy","xxyy","xyx","xyx","xyxx","xyxx","xyxy","xyxy","xyy","xyy","xyyx","xyyx","xyyy","xyyy","yx","yx","yxx","yxx","yxxx","yxxx","yxxy","yxxy","yxy","yxy","yxyx","yxyx","yxyy","yxyy","yy","yy","yyx","yyx","yyxx","yyxx","yyxy","yyxy","yyy","yyy","yyyx","yyyx","yyyy","yyyy","BUFFER_SIZE","DEFAULT_BPM","DEFAULT_OVERSAMPLING_FACTOR","DEFAULT_SMOOTHLIFE_SIZE","MAX_BLOCK_SIZE","MAX_BUFFER_SIZE","MAX_NOTE_EVENTS_PER_BUFFER","MAX_OVERSAMPLING_FACTOR","MAX_SPECTRAL_BLOCK_SIZE","NUM_CHANNELS","NUM_VOICES","OVERSAMPLED_SAMPLE_RATE","PRINT_DSP_LOAD","SAMPLE_RATE","TUNING_FREQ_HZ","V2","WINDOW_SIZE","adapt_into_using","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","from","from_sample_","init","into","to_sample_","try_convert_into","try_from","try_into","type_id","update_oversampled_sample_rate","vzip","x","y","SimdBuffer","SimdType","from_f32","from_f64","from_simd_array","to_simd_array","AtomicOps","InterpType","SmoothingType","ThreadPool","atomic_ops","general","ilerp","interp","lerp","smoothing","thread_pool","window","xfer","AtomicOps","NonAtomic","lr","sr","db_to_level","dot","epsilon_eq","freq_lin_from_log","freq_log_norm","freq_to_note","interleave_dvec2_to_f64","interleave_vec2_to_f32","lanczos_kernel","level_to_db","map","map_f32","normalize","normalize_f32","note_to_freq","sample_length","scale","scale_f32","sinc","within_tolerance","CatmullCubic","Cosine","DefaultCubic","HermiteCubic","InterpolationType","Linear","NoInterp","__clone_box","adapt_into_using","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","cosine","cubic","cubic_catmull","cubic_catmull_vec","cubic_hermite","cubic_hermite_vec","cubic_vec","default","deref","deref_mut","drop","fmt","from","from_sample_","ilerp","init","into","lerp","linear","linear_unclamped","to_owned","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","Smoothable","SmoothableAtomic","Smoother","SmootherAtomic","smoothable_types","smoother","smoother_atomic","Atomic","Smoothable","SmoothableAtomic","atomic_load","atomic_new","atomic_store","from_f32","from_f32","from_f64","from_f64","to_f32","to_f32","to_f64","to_f64","Smoother","__clone_box","adapt_into_using","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","current_value","default","deref","deref_mut","drop","finish","fmt","from","from_sample_","init","into","is_active","new","next","next_block","next_block_exact","reset","reset_sample_rate","reset_to","set_smoothing_period","set_smoothing_type","set_start_value","set_target_value","skip","stop_in_place","target_value","to_owned","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","with_smoothing_type","SmootherAtomic","__clone_box","adapt_into_using","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","current_value","default","deref","deref_mut","drop","finish","fmt","from","from_sample_","init","into","is_active","new","next","next_block","next_block_exact","reset","reset_sample_rate","reset_to","set_smoothing_period","set_smoothing_type","set_start_value","set_target_value","skip","stop_in_place","to_owned","to_sample_","try_convert_into","try_from","try_into","type_id","vzip","with_smoothing_type","FailedSpawn","PoolCreationError","ThreadPool","ZeroThreads","adapt_into_using","adapt_into_using","borrow","borrow","borrow_mut","borrow_mut","build","convert_into","convert_into","convert_unclamped_into","convert_unclamped_into","deref","deref","deref_mut","deref_mut","drop","drop","drop","execute","fmt","fmt","from","from","from_sample_","from_sample_","init","init","into","into","is_idle","num_idle","num_threads","queued_jobs","to_sample_","to_sample_","try_convert_into","try_convert_into","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","wait_until_done","Blackman","BlackmanHarris","BlackmanNuttall","FlatTop","Hamming","Hann","Nuttall","Parzen","Sine","Tukey","Welch","WindowType","__clone_box","adapt_into_using","blackman","blackman_harris","blackman_harris_in_place","blackman_in_place","blackman_nuttall","blackman_nuttall_in_place","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","drop","eq","equivalent","equivalent","flat_top","flat_top_in_place","fmt","from","from_sample_","hamming","hamming_in_place","hann","hann_in_place","init","into","multiply_buffers","nuttall","nuttall_in_place","parzen","parzen_in_place","sine","sine_in_place","to_owned","to_sample_","try_convert_into","try_from","try_into","tukey","tukey_in_place","type_id","vzip","welch","welch_in_place","Cosine","CurveLinearStart","CurveNormal","CurveRounder","Linear","SineBottom","SineTop","SmoothingType","__clone_box","adapt_into_using","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","default","deref","deref_mut","drop","fmt","from","from_sample_","gentle_over","gentle_under","init","into","s_curve","s_curve_linear_centre","s_curve_round","sine","sine_lower","sine_upper","skewed_sine","smooth_soft_clip","strong_over","strong_under","tanh","to_owned","to_sample_","try_convert_into","try_from","try_into","type_id","vzip"],"q":[[0,"creative_coding_project"],[9,"creative_coding_project::app"],[90,"creative_coding_project::app::audio"],[97,"creative_coding_project::app::audio::context"],[123,"creative_coding_project::app::audio::model"],[170,"creative_coding_project::app::audio::model::audio_constructor"],[174,"creative_coding_project::app::audio::model::builder"],[225,"creative_coding_project::app::audio::model::components"],[423,"creative_coding_project::app::audio::model::params"],[476,"creative_coding_project::app::audio::process"],[477,"creative_coding_project::app::audio::voice"],[484,"creative_coding_project::app::audio::voice::note"],[537,"creative_coding_project::app::audio::voice::note::NoteEvent"],[541,"creative_coding_project::app::audio::voice::voice"],[635,"creative_coding_project::app::event"],[636,"creative_coding_project::app::musical"],[641,"creative_coding_project::app::musical::chord"],[681,"creative_coding_project::app::musical::note"],[776,"creative_coding_project::app::musical::rhythm16"],[804,"creative_coding_project::app::musical::scale"],[844,"creative_coding_project::app::params"],[846,"creative_coding_project::app::params::types"],[1136,"creative_coding_project::app::params::ui"],[1207,"creative_coding_project::app::update"],[1208,"creative_coding_project::app::view"],[1209,"creative_coding_project::dsp"],[1247,"creative_coding_project::dsp::delay"],[1253,"creative_coding_project::dsp::delay::delay"],[1290,"creative_coding_project::dsp::delay::ring_buffer"],[1330,"creative_coding_project::dsp::delay::stereo_delay"],[1368,"creative_coding_project::dsp::distortion"],[1371,"creative_coding_project::dsp::distortion::decimation"],[1390,"creative_coding_project::dsp::distortion::waveshaper"],[1422,"creative_coding_project::dsp::dynamics"],[1425,"creative_coding_project::dsp::dynamics::adsr"],[1525,"creative_coding_project::dsp::dynamics::compressor"],[1560,"creative_coding_project::dsp::filtering"],[1604,"creative_coding_project::dsp::filtering::biquad"],[1672,"creative_coding_project::dsp::filtering::comb"],[1735,"creative_coding_project::dsp::filtering::filter_design"],[1737,"creative_coding_project::dsp::filtering::filter_design::coefficients"],[1814,"creative_coding_project::dsp::filtering::filter_design::design"],[1857,"creative_coding_project::dsp::filtering::first_order"],[1859,"creative_coding_project::dsp::filtering::first_order::filter"],[1894,"creative_coding_project::dsp::filtering::lrf"],[1896,"creative_coding_project::dsp::filtering::lrf::filter"],[1927,"creative_coding_project::dsp::filtering::resonator"],[1929,"creative_coding_project::dsp::filtering::resonator::resonator_bank"],[2037,"creative_coding_project::dsp::filtering::resonator::two_pole_resonator"],[2072,"creative_coding_project::dsp::filtering::simple"],[2075,"creative_coding_project::dsp::filtering::simple::ballistics"],[2133,"creative_coding_project::dsp::filtering::simple::dc_filter"],[2163,"creative_coding_project::dsp::filtering::simple::one_pole_lowpass"],[2194,"creative_coding_project::dsp::filtering::svf"],[2196,"creative_coding_project::dsp::filtering::svf::filter"],[2228,"creative_coding_project::dsp::modulation"],[2231,"creative_coding_project::dsp::modulation::chorus"],[2261,"creative_coding_project::dsp::oversampling"],[2323,"creative_coding_project::dsp::spectral"],[2326,"creative_coding_project::dsp::spectral::spectral_filter"],[2356,"creative_coding_project::dsp::spectral::spectral_filter::mask"],[2389,"creative_coding_project::dsp::spectral::stft"],[2392,"creative_coding_project::dsp::spectral::stft::helper"],[2421,"creative_coding_project::dsp::spectral::stft::stft_trait"],[2427,"creative_coding_project::dsp::synthesis"],[2436,"creative_coding_project::dsp::synthesis::basic"],[2446,"creative_coding_project::dsp::synthesis::basic::noise_osc"],[2471,"creative_coding_project::dsp::synthesis::basic::phasor"],[2503,"creative_coding_project::dsp::synthesis::basic::sine"],[2530,"creative_coding_project::dsp::synthesis::basic::square"],[2557,"creative_coding_project::dsp::synthesis::basic::tri"],[2584,"creative_coding_project::dsp::synthesis::generator"],[2616,"creative_coding_project::dsp::util"],[2625,"creative_coding_project::dsp::util::dry_wet"],[2663,"creative_coding_project::dsp::util::effect_trait"],[2667,"creative_coding_project::dsp::util::stereo_wrapper"],[2700,"creative_coding_project::dsp::util::utility"],[2765,"creative_coding_project::fonts"],[2768,"creative_coding_project::generative"],[2778,"creative_coding_project::generative::contours"],[2817,"creative_coding_project::generative::contours::contours_gpu"],[2851,"creative_coding_project::generative::smooth_life"],[3039,"creative_coding_project::generative::vectors"],[3112,"creative_coding_project::generative::voronoi"],[3114,"creative_coding_project::generative::voronoi::general"],[3140,"creative_coding_project::gui"],[3146,"creative_coding_project::gui::colors"],[3155,"creative_coding_project::gui::components"],[3196,"creative_coding_project::gui::components::button"],[3238,"creative_coding_project::gui::components::label"],[3267,"creative_coding_project::gui::components::menu"],[3311,"creative_coding_project::gui::components::menu_trait"],[3315,"creative_coding_project::gui::components::text_slider"],[3383,"creative_coding_project::gui::draw_traits"],[3427,"creative_coding_project::gui::rdp"],[3429,"creative_coding_project::gui::spectrum"],[3436,"creative_coding_project::gui::spectrum::analyzer"],[3458,"creative_coding_project::gui::spectrum::process"],[3489,"creative_coding_project::gui::ui"],[3491,"creative_coding_project::gui::ui::components"],[3530,"creative_coding_project::gui::ui::layout"],[3864,"creative_coding_project::prelude"],[4377,"creative_coding_project::settings"],[4415,"creative_coding_project::simd"],[4421,"creative_coding_project::util"],[4434,"creative_coding_project::util::atomic_ops"],[4438,"creative_coding_project::util::general"],[4458,"creative_coding_project::util::interp"],[4500,"creative_coding_project::util::smoothing"],[4507,"creative_coding_project::util::smoothing::smoothable_types"],[4521,"creative_coding_project::util::smoothing::smoother"],[4564,"creative_coding_project::util::smoothing::smoother_atomic"],[4606,"creative_coding_project::util::thread_pool"],[4656,"creative_coding_project::util::window"],[4717,"creative_coding_project::util::xfer"],[4762,"palette::chromatic_adaptation"],[4763,"nannou::app"],[4764,"nannou::draw"],[4765,"nannou_core::geom::rect"],[4766,"palette::convert"],[4767,"core::result"],[4768,"core::any"],[4769,"nannou::event"],[4770,"core::fmt"],[4771,"core::fmt"],[4772,"core::option"],[4773,"dyn_clone::sealed"],[4774,"atomic"],[4775,"alloc::sync"],[4776,"std::sync::mpsc"],[4777,"nannou::event"],[4778,"alloc::string"],[4779,"nannou::frame"],[4780,"core::ops::range"],[4781,"core::ops::function"],[4782,"core::marker"],[4783,"alloc::boxed"],[4784,"alloc::vec"],[4785,"core::cell"],[4786,"alloc::rc"],[4787,"core::ops::function"],[4788,"core::default"],[4789,"core::fmt"],[4790,"core::sync::atomic"],[4791,"atomic_float::atomic_f32"],[4792,"nannou_core::color"],[4793,"std::sync::mutex"],[4794,"nannou::text::layout"],[4795,"nannou_core::color"],[4796,"core::sync::atomic"],[4797,"glam::vec2"],[4798,"glam::vec_mask"],[4799,"core::sync::atomic"],[4800,"glam::vec3"],[4801,"glam::vec3"],[4802,"glam::core::storage"],[4803,"glam::vec4"],[4804,"core::cmp"],[4805,"rand::distributions::uniform"],[4806,"wide::i64x4_"],[4807,"serde::ser"],[4808,"wide::f64x2_"]],"d":["","","","","","","Global constants and static variables.","","Global utility functions — these are publicly …","The app’s model, i.e. its general state.","","","A thread-safe reference to the timer which tracks when the …","Channels to send messages directly to the audio thread.","The CPAL audio stream.","","","","Builds the app’s <code>Model</code>.","","A Perlin noise contour generator.","","","Returns the (approximate) sample index for the current …","","","","","","Draws the spectral mask scan line.","","A string showing the (rough) DSP load.","","","","","Returns the argument unchanged.","","","Increments the internal position of the mask scan line.","","","Calls <code>U::from(self)</code>.","","","","Panics","","The amount to increment the position of the mask scan line …","The line which shows which column is being used as a …","","","","A thread-safe reference to the note handler.","Current octave for note input (via typing keyboard).","","The post-FX spectrogram.","The pre-FX spectrogram.","A HashMap of the currently-pressed keys.","","","","Runs the app via Nannou.","A reference to the sample rate value.","A SmoothLife simulation.","A thread-safe reference to the mask used for spectral …","","","","","","","","","","","Y-pos to Q (and back) conversions found experimenting on …","","Updates the model’s input data.","","","","A simple vector field for the resonator bank points.","","","A Voronoi noise generator used for the spectral mask.","The voronoi generator for the resonator bank vector field.","A vector field used to manage points for the Voronoi mask.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","The program’s audio state.","","","","","","","","","","","Audio-related contextual data.","","","Panics","Audio-related data (gain, oversampling state, …).","","","","Returns the argument unchanged.","","Fields related to audio generation (envelopes, …","Returns the internal sample rate of the audio model.","Returns the internal upsampled rate of the audio model.","","","Calls <code>U::from(self)</code>.","","Message receiving channels.","Returns the next available note event, if it exists.","","All audio-related parameters linked to the UI.","","Signal processors — both musical FX and DSP-related.","","The pre- and post-FX spectrograms on the audio thread.","","","","","","","","","","The audio thread’s voice handler.","","","","","","","","","","","","","","","Moves <code>buffers</code> into the <code>AudioModel</code>.","Builds the audio model.","","","","","","Moves <code>data</code> into the <code>AudioModel</code>.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Moves <code>generation</code> into the <code>AudioModel</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Initialises a new, default audio model.","Connects the appropriate values with the UI.","Moves <code>processors</code> into the <code>AudioModel</code>.","","","","","","","","","","","","","","","","","","The fields of this struct are used to communicate directly …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","All audio-related parameters linked to the UI.","","","","Compressor attack time in milliseconds.","Compressor ratio.","Compressor release time in milliseconds.","Compressor threshold.","","","","The delay feedback.","The dry/wet mix for the delay.","The time between delay taps in milliseconds.","","","The “amount” of distortion, i.e. drive.","The distortion algorithm.","","The exciter oscillator.","Returns the argument unchanged.","","The cutoff of the high-pass filter in Hz.","The gain value of the shelf filter.","Whether the high filter is a shelf filter or not.","The Q value of the high-pass filter.","","Calls <code>U::from(self)</code>.","The cutoff of the filter in Hz.","The gain value of the shelf filter","Whether the low filter is a shelf filter or not.","The Q value of the cut filter.","Whether the spectral filter is post-FX or not.","","The block size of the spectral filter.","The device’s master gain level.","","How much each resonator’s pitch skews towards its …","The dry/wet mix of the resonator bank.","How much panning may be applied to each resonator.","Whether the resonators should quantise their pitch to a …","The number of active resonators in the bank.","The root note of the resonator bank.","The musical scale of the resonator bank.","The frequency shift of each resonator.","The frequency spread (range) of each resonator.","","","","","","Whether to use ping-pong delay or not.","","The main audio processing callback.","","","","","","","","An enum to represent individual note states and their data.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the frequency value of the event.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a new, empty <code>NoteHandler</code>.","Obtains the next event in the internal queue, or returns …","Returns the MIDI note value of the event.","Adds a note event to the internal queue.","Returns the sample timing of the event.","","","","","","","","","","","","","","The MIDI note value of the note.","The MIDI note value of the note.","The sample offset from the start of the block to the start …","The sample offset from the start of the block to the start …","","","A struct to represent each individual voice.","","A struct to handle all voices, i.e. the spawning and …","","","","","","Attaches the current generator oscillator to the …","Attaches a reference to the sample rate to the <code>VoiceHandler</code>…","","","","","","","Builds a new <code>VoiceHandler</code> with a reference to the …","","","","","","","","","","","","","","","","","","","","","The voice’s ADSR envelope.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","The audio generator stored within the voice.","The type of generator to use.","The voice’s unique ID.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether there is at least one voice active or not.","Immediately terminates all active voices.","","The MIDI note of the voice.","","Whether or not the voice is currently releasing, which …","","Starts the release stage for all active voices.","Starts a voice’s release stage.","Starts a new voice.","Terminates all voices which are releasing and which have an","","","","","","","","","","","","","","","","","","","A reference to the note handler to obtain note events. The …","","","","","","","","","","A simple struct for generating the notes of a common …","","","","","","","","","","Returns the argument unchanged.","","Generates the notes of a custom chord arrangement.","Generates the notes of a major chord with <code>root_note</code> as the …","Generates the notes of a major 7th chord with <code>root_note</code> as …","Generates the notes of a major 9th chord with <code>root_note</code> as …","Generates the notes of a major add 2 chord with <code>root_note</code> …","Generates the notes of a major add 4 chord with <code>root_note</code> …","Generates the notes of a major add 9 chord with <code>root_note</code> …","Generates the notes of a minor chord with <code>root_note</code> as the …","Generates the notes of a minor 7th chord with <code>root_note</code> as …","Generates the notes of a minor 9th chord with <code>root_note</code> as …","Generates the notes of a minor add 2 chord with <code>root_note</code> …","Generates the notes of a minor add 4 chord with <code>root_note</code> …","Generates the notes of a minor add 9 chord with <code>root_note</code> …","Generates the notes of a sus2 chord with <code>root_note</code> as the …","Generates the notes of a sus4 chord with <code>root_note</code> as the …","","Calls <code>U::from(self)</code>.","Inverts (transposes down one octave) a random note of the …","","Returns the previously-generated chord.","Offsets each note in the previously-generated chord by a …","Randomly transposes the notes of the previously-generated …","","","","","","","","","","","Octave covering C0 - B0 (MIDI note range 12 - 23)","Octave covering C1 - B1 (MIDI note range 24 - 35)","Octave covering C2 - B2 (MIDI note range 36 - 47)","Octave covering C3 - B3 (MIDI note range 48 - 59)","Octave covering C4 - B4 (MIDI note range 60 - 71)","Octave covering C5 - B5 (MIDI note range 72 - 83)","Octave covering C6 - B6 (MIDI note range 84 - 95)","Octave covering C7 - B7 (MIDI note range 96 - 107)","Octave covering C8 - B8 (MIDI note range 108 - 119)","Octave covering C9 - B9 (MIDI note range 120 - 131)","Octave covering C-1 - B-1 (MIDI note range 0 - 11)","","","","","","","","","All the keyboard values which are used to trigger MIDI …","The intervals of notes in a major pentatonic scale for a …","The intervals of notes in a major scale for a single …","The intervals of notes in a minor pentatonic scale for a …","The intervals of notes in a minor scale for a single …","","","","","","","","","","","","","","","","","","","Decreases the octave by one. Does not exceed C-1.","Decreases the octave by <code>amount</code>. Does not exceed C-1.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the key associated with a specific key on the …","Returns the <code>Octave</code> which covers the provided MIDI note.","","","Returns the note associated with the provided MIDI note …","Increases the octave by one. Does not exceed C9.","Increases the octave by <code>amount</code>. Does not exceed C9.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns the value of the note for any octave.","Returns the value of the starting note of this octave.","","","","","","","Transposes the octave, returning the new octave.","Returns the note with a given transposition.","","","","","","","","","","","","1/8 rhythm.","3/8 rhythm (3 bars so it wraps completely).","1/2 rhythm.","3/16 rhythm (3 bars so it wraps completely).","1/4 rhythm.","A container of common rhythmic patterns represented as …","1/16 rhythm.","1/1 rhythm.","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Common scale representations.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","Quantizes <code>note</code> to its current scale, i.e. snaps it to the …","","","","","","","","","All the custom UI parameter types.","UI parameters and their default values.","A perlin noise contour-line generator.","","Downsampling distortion. TODO","","","","More aggressive clipping function — not technically hard …","","","No distortion.","Only draw the post-FX spectrogram.","Only draw the pre-FX spectrogram.","Draw both the pre- and post-FX spectrograms.","","","","","","","","","","","","","","","","","","","","","","","A SmoothLife simulation.","","","A smooth soft clipping function.","","","","","","A Voronoi noise generator.","A wrapping clipping algorithm. TODO","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","All parameters controlled by the user interface.","","","","Compression attack time in milliseconds.","Compression ratio.","Compression release time in milliseconds.","Compression threshold in decibels.","The number of contours to draw.","The speed of the contour animation.","The thickness of each contour line.","","","","The delay feedback.","The dry/wet mix for the delay.","The time between delay taps in milliseconds.","","","The “amount” of distortion.","The distortion algorithm.","","The exciter oscillator.","","Returns the argument unchanged.","","The cutoff of the high-pass filter in Hz.","The gain value of the shelf filter.","Whether the high filter is a shelf filter or not.","The Q value of the high-pass filter.","","Calls <code>U::from(self)</code>.","The cutoff of the filter in Hz.","The gain value of the shelf filter","Whether the low filter is a shelf filter or not.","The Q value of the cut filter.","The algorithm to use for the spectral filter.","Whether the spectral filter is pre- or post-FX.","","The block size of the spectral filter.","The speed of the spectral filter scan line.","Master gain level in decibels.","","","","The friction applied to each point in the vector field.","How much each resonator’s pitch skews towards its …","The dry/wet mix of the resonator bank.","How much panning may be applied to each resonator.","Whether the resonators should quantise their pitch to a …","The number of active resonators in the bank.","The root note of the resonator bank.","The musical scale of the resonator bank.","The frequency shift of each resonator.","The frequency spread (range) of each resonator.","The state preset of the smoothlife simulation.","The resolution of the smooth life simulation.","The speed of the smoothlife simulation.","The resolution of both spectrograms.","The timing of the spectrograms.","Which spectrograms are drawn.","","","","","","Whether to use ping-pong delay or not.","The weight of the Voronoi borders and isolines.","The number of Voronoi cells.","The speed of the Voronoi flow field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Module for dynamics processors.","Module for time domain filters.","","","Module for spectral (frequency domain) processing.","Module for signal generation.","","","","","Module for signal delays.","","","","An audio delay tap.","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Returns the maximum delay time of the <code>Delay</code> in seconds — …","Creates a new <code>Delay</code> which can provide up to","","Sets the delay time of the tap in seconds.","Sets the delay time of the tap in samples.","","Sets a new sample rate for the <code>Delay</code>.","Sets the time it takes for the internal delay time to …","","","","","","","","Returns <code>Self</code> with a delay time of <code>delay_secs</code>.","Returns <code>Self</code> with a delay time of <code>delay_samples</code>.","A resizable ring buffer which supports interpolation and …","","","","","Clears the contents of the buffer, i.e. sets its contents …","","","","","","","","","","Returns the argument unchanged.","","Returns the internal sample rate of the <code>RingBuffer</code>.","","Calls <code>U::from(self)</code>.","Returns the maximum delay time possible for the current …","Returns a new, initialised <code>RingBuffer</code> which holds <code>size</code> …","Pushes <code>element</code> to the <code>RingBuffer</code>.","Reads the delayed element from the <code>RingBuffer</code>.","Resets the <code>RingBuffer</code> to its default settings. Does not …","Safety","Sets the delay time of the <code>RingBuffer</code> in seconds.","Sets the interpolation method for the <code>RingBuffer</code>. This …","Sets the internal sample rate.","Sets the smoothing method and time for the <code>RingBuffer</code>. …","Returns the number of elements held by the <code>RingBuffer</code>.","","","","","","","","Sets the interpolation method for the <code>RingBuffer</code>. This …","Sets the smoothing method and time for the <code>RingBuffer</code>. …","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Module for signal decimation, AKA downsampling.","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","A waveshaper which dynamically accepts any transfer …","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Returns a new, initialised waveshaper.","Processes a single sample through the waveshaper.","Sets whether the waveshaper separately applies drive to …","Sets the curve of the waveshaper.","Sets the range for the waveshaper’s <code>curve</code> parameters to …","Sets the drive of the waveshaper. If asymmetric distortion …","Sets the drive of the waveshaper for negative parts of the …","Moves <code>function</code> into the waveshaper, which will then use it …","If the transfer function you want to pass does not cover …","If the transfer function you want to pass only has a …","<code>set_xfer_function_single_argument()</code> and …","Smooth soft saturation function. <code>input</code> is clamped between …","","","","","","","","Module for an ADSR envelope generator.","","An envelope generator with attack, decay, sustain, and …","","An enum representing the possible stages of an ADSR …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the current value of the envelope.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the current <code>AdsrStage</code> of the envelope generator.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether the envelope is in an idle stage or not.","Creates a new ADSR envelope with the following default …","Progresses the state of the envelope by one sample, …","","","Returns a reference to the envelope’s parameters.","Returns a mutable reference to the envelope’s parameters.","Resets the internal sample rate for timing.","Sets the attack curve of the envelope. Positive values “…","Sets the attack level of the envelope.","Sets the attack time of the envelope in milliseconds.","Sets the decay curve of the envelope. Positive values “…","Sets the decay time of the envelope in milliseconds.","Sets the main parameters of the envelope at once.","Sets the decay curve of the envelope. Positive values “…","Sets the release time of the envelope in milliseconds.","Sets the sustain level of the envelope between <code>0.0</code> and <code>1.0</code>.","Sets the envelope’s trigger.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Standard compression gain function with a rounded knee …","","","Calls <code>U::from(self)</code>.","","","Sets the compressor’s attack time in milliseconds.","Sets the compressor’s knee width.","Sets the ratio of the compressor. Any values over <code>100.0</code> …","Sets the compressor’s release time in milliseconds.","Sets the compressor’s threshold in decibels.","","","","","","","Sets whether to use RMS level in the envelope calculation.","","","","","A trait which allows for filters to be dynamically …","An enum which covers the available filter types.","","","","","","","","","Second-order biquad filter form supporting various filter …","","","","","FIR (finite impulse response) and IIR (infinite impulse …","","","","","","","Filter design methods intended for oversampling. All based …","First-order lowpass and highpass filters.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Linkwitz-Riley filter, based on the TPT …","Generic processing method for a filter.","","","State variable filter, based on the TPT …","","","","","","","","A biquad filter implementation, which offers all of the …","A struct which covers the parameters used by biquad …","","","","","","","","","Returns the bandwidth of the bandpass/notch filter.","Returns the half-power points (-3 dB gain) of the …","","","","","","","","","","","","","","","","","","","","Forces the filter to recompute its coefficients on the …","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new, initialised <code>Filter</code>, set to the default <code>Peak</code> …","Processes a single sample of the filter and returns the …","","Resets the sample rate of the filter.","Returns the magnitude response at <code>freq</code> Hz in decibels.","Sets the frequency of the filter.","Sets the gain of the filter.","Sets the parameters of the filter all at once.","Sets the Q of the filter.","Sets the filter type of the filter.","“Suspends” the filter, leaving any processed signal …","","","","","","","","","","","","","","","A FIR (Finite Impulse Response) comb filter.","A IIR (Infinite Impulse Response) comb filter.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Processes a single sample of the comb filter, returning …","Processes a single sample of the comb filter, returning …","Use this if you change the sample rate to reallocate the …","Use this if you change the sample rate to reallocate the …","Sets the frequency of the comb filter. Must be between 10 …","Sets the frequency of the comb filter. Must be between 10 …","Sets the gain of the comb filter.","Sets the gain of the comb filter.","Moves <code>filters</code> into the comb filter, which will process …","Sets whether the comb filter should interpolate between …","Sets whether the comb filter should interpolate between …","Sets the polarity of the comb filter.","Sets the polarity of the comb filter.","","","","","","","","","","","","","","","Creates a new, initialized filter with an internal buffer …","Creates a new, initialized filter with an internal buffer …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A struct which holds various methods for designing filters.","A struct which is returned from the …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","A 4th order Linkwitz-Riley filter, which is commonly used …","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","Panics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The overall shift in (original) resonator pitches.","The overall range of (original) resonator pitches.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","The amount each pitch can skew towards its original value.","","","","Returns a reference to the internal resonators.","Returns a mutable reference to the internal resonators.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the maximum number of resonators available in the …","","","Returns a mutable reference to the raw resonator pitches.","Returns a mutable reference to the raw pan values.","","How much panning is applied to each resonator.","","","","","Whether each resonator’s left and right filter should …","Randomizes the raw pitches of the resonator bank.","","","","","Sets how much each resonator pitch skews towards its …","Sets the number of active resonators in the bank.","Scales the panning applied to each resonator.","","Sets the root note of the bank’s scale.","Sets the internal musical scale of the bank.","","","","","","","","","","","","","","","","","","","","","","","A two-pole resonator.","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Returns the filter magnitude at <code>frequency_hz</code> Hz.","Creates a new filter with identity coefficients (i.e., any …","Returns the phase response at <code>frequency_hz</code> Hz.","","","Returns the internal sample rate of the filter.","Sets the cutoff frequency of the filter in Hz.","<code>resonance</code> is clamped between <code>0.0</code> and <code>1.0</code>.","Resets the internal sample rate of the filter.","","","","","","","","Ballistics filter, most useful for dynamics processors.","","One-pole lowpass filter.","A filter for measuring attack and release ballistics, most …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>BallisticsFilter</code> which can store <code>num_channels</code>…","","Resets the internal buffer to <code>0.0</code>.","Sets the attack time of the filter in milliseconds.","Sets the level calculation type for the filter to use …","Sets the number of channels for the filter to store …","Sets the release time of the filter in milliseconds.","","","","","","","","","","","","","","","A wrapper around a highpass <code>FirstOrderFilter</code> tailored for …","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Panics","","Panics","Panics","","","","","","","","Source: …","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Returns a new <code>OnePoleLowpass</code> filter with identity …","","","Sets the cutoff frequency of the filter in Hz.","Sets the cutoff frequency based on a time value in …","Sets the cutoff frequency based on a time value in …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","An oversampler which uses Lanczos resampling.","A struct for holding owned audio data, used for …","","","","","","","","Returns an immutable slice to one of the buffer’s …","Returns a mutable slice to one of the buffer’s channels.","Clears the buffer. Use <code>resize()</code> to reallocate space.","","","","","","","Copies the contents of <code>buffer</code> into the <code>OversamplingBuffer</code>. …","Copies the contents of the <code>OversamplingBuffer</code> into <code>buffer</code>. …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates a new buffer holding <code>num_channels</code> channels of …","Panics","Returns the number of channels held in the buffer.","Returns the number of samples held in each of the buffer’…","","","Resizes the buffer.","","","","","","","","","","","","","","","","","","","A spectral filtering processor, which accepts a …","","The current block size of the filter.","","","Clears the filter’s internal buffers.","The compensation factor for a hanning window, resulting in …","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Spectral frequency masking.","The maximum block size of the filter.","Panics","Processes a block of audio. This does not necessarily call …","Panics","Clones <code>mask</code> into the filter.","Sets the dry/wet mix of the filter. <code>0.0</code> is 100% dry, and …","","","","","","","","","","Returns the frequency of bin with index <code>idx</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Returns the maximum size of the mask.","Creates a new <code>SpectralMask</code> with <code>max_size</code> capacity.","Sets the “working size” of the mask. This will not …","","","","","","","","","Sets the “working size” of the mask.","","Module for a short-time Fourier transform “helper”.","Module for STFT traits used by [<code>StftHelper</code>].","","","","","Clears the internal buffers.","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Amount of latency produced by the STFT process in samples.","Maximum block size the <code>StftHelper</code> was set up with.","Maximum amount of padding the <code>StftHelper</code> was set up with.","Returns a new <code>StftHelper</code>.","Number of channels the <code>StftHelper</code> was set up with.","Only processes the forward FFT, so the buffer is only ever …","Processes the audio from <code>main_buffer</code> in short, overlapping …","Sets the block size. This clears the internal buffers, …","Set the amount of padding. This clears the internal …","","","","","","","A buffer which may be read by the <code>StftHelper</code>.","A buffer which may be written to by the <code>StftHelper</code>.","Obtains a copy of a specific sample without any bounds …","Obtains a mutable reference to a specific sample without …","Number of channels in the input buffer.","Number of samples in the input buffer.","","A trait for audio generators.","","","","","Generic enum for audio generators.","Processes two stereo channels.","Sets the frequency for the generator.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","Non-antialiased phasor generator (AKA saw or sawtooth wave …","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","The phase value.","The phase increment based on the current frequency.","","","","","","","","","","Basic non-antialiased sine wave oscillator.","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Basic non-antialiased square wave oscillator.","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Basic non-antialiased triangle wave oscillator.","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","All the types of signal generators available.","A basic white noise generator.","A basic saw wave generator.","A basic sine wave generator.","A basic square wave generator.","A basic triangle wave generator.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","“Utility” processor for basic amplitude control.","A simple dry-wet wrapper around an Effect.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","<code>mix == 0.0</code> is 100% dry, and <code>mix == 1.0</code> is 100% wet.","<code>mix == 0.0</code> is 100% dry, and <code>mix == 1.0</code> is 100% wet.","","","","","","","","","Unwraps the contained effect.","","Generic trait for audio processing effects.","","Method to process a single sample of audio.","Method to process two stereo samples of audio.","A simple wrapper around two mono <code>Effect</code> objects.","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","AKA -3 dB, or sine law","AKA -6 dB","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","<code>-1.0</code> is hard-left panning; <code>0.0</code> is centred; <code>1.0</code> is …","","<code>0.0</code> does not affect the signal; <code>-1.0</code> is 100% mid; <code>1.0</code> is …","","","","","","","","","","","","","","","","SF Mono Bold","SF Mono Medium","SF Mono Regular","","","","","","","","","","Voronoi (Worley) noise algorithms.","Perlin noise contour line generator. Supports …","","","","","Updates the internal image buffer and noise generator. …","","","","","","","","Returns the argument unchanged.","","The height of the image buffer in pixels.","","Calls <code>U::from(self)</code>.","Creates a new <code>Contours</code>.","Randomizes the internal <code>z</code> value.","","Sets the range in which pixels are drawn for each contour.","Controls whether the contour lines should be feathered or …","Sets how many contours to compute.","Sets the number of threads to use for computing the noise …","Sets how much to increment the z value per frame to …","","","","","","","","The width of the image buffer in pixels.","Adds the provided range to <code>self</code>.","Controls whether the contour lines should be feathered or …","Sets how many contours to compute.","Sets the number of threads to use for computing the noise …","Sets how much to increment the z value per frame to …","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","This method expects <code>x</code> an <code>y</code> to be in the range <code>0.0</code> to <code>1.0</code>.","","This method expects <code>x</code> an <code>y</code> to be in the range <code>0.0</code> to <code>1.0</code>.","","","The current state of the grid.","The current grid.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","# Panics","","","","","","","","","","This function may allocate, and may be an expensive …","","","","","","The internal state of the simulation.","The internal state of the simulation.","","","","","","","","","","<code>Source</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","# Panics","","","","","","","","","# Panics","","# Panics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Copy the 2D points from <code>Vectors</code> into the <code>Voronoi</code> generator.","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Hovered-over background.","Non-selected background (main background color).","Selected background.","Big text labels.","Hovered-over text labels.","Value text labels.","Non-selected text labels.","Selected text labels.","Value text labels.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","A button UI component, which can act as a trigger or …","","","","","","","","Returns a reference to the button’s disabled text layout.","Returns a mutable reference to the button’s disabled …","","","Returns the state of the button.","Returns a reference to the button’s enabled text layout.","Returns a mutable reference to the button’s enabled text …","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Returns a reference to the button’s label text layout.","Returns a mutable reference to the button’s label text …","Creates a new, default <code>Button</code>.","","Provides a which is called when the button is pressed, …","","","Sets whether the button should be toggleable or not. Both …","","","","","","","Provides a which is called when the button is pressed, …","Provides a text layout for the button’s disabled state.","Sets the disabled text for a toggleable button. The …","Provides a text layout for the button’s enabled state.","Sets the enabled text for a toggleable button. The default …","Sets the font size for the whole <code>Button</code>.","Provides a label for the button. This will appear above …","Provides a text layout for the button’s label.","Sets the initial state of the button. Only applies to …","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Creates a new, default <code>Label</code>.","","Sets the label text.","Sets the label text color.","Sets the label text layout.","","","","","","","","Provides the label text for the <code>Label</code>.","Provides a color for the label text.","Provides a text layout for the label text.","A menu UI component, which essentially exposes an <code>enum</code> as …","","","","","","","","","","","Returns the argument unchanged.","","","Sets the initial item variant for the menu.","Calls <code>U::from(self)</code>.","Returns whether the menu is open or not.","Returns a reference to the menu’s item text layout.","Returns a mutable reference to the menu’s item text …","Returns a reference to the menu’s label text layout.","Returns a mutable reference to the menu’s label text …","Creates a new, default <code>Menu</code>.","Returns the current item of the menu.","","Returns a reference to the menu’s selected item text …","Returns a mutable reference to the menu’s selected item …","Sets a callback, which is called whenever a new item is …","","Creates the menu in its open state.","","","","","","","","Provides a callback to the menu, which is called whenever …","Sets the font size for the whole <code>Menu</code>.","Sets the font size for the item labels.","Sets each item’s text layout.","Provides the <code>Menu</code> with a label.","Sets the font size for the menu label.","Sets the label’s text layout.","Provides a text layout for the selected item when the menu …","A trait for preparing an enum for use with the [<code>Menu</code>] UI …","The variant from a given index. This method should be used …","The index for a given variant. Used to avoid having to …","The number of variants in the enum, used to layout the …","A simple slider with a text readout.","","","","","","","","Detaches any attached callback from the <code>TextSlider</code>.","Detaches any attached formatting callback from the …","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Returns whether the <code>TextSlider</code> is current active or not …","Returns a reference to the current label text layout.","Returns a mutable reference to the current label text …","Sets whether to use logarithmic scaling for the output …","Created a new <code>TextSlider</code> with default options.","","Provides a callback which is called whenever the <code>TextSlider</code>…","Sets the default value of the <code>TextSlider</code>.","Sets the font size both the label and value readout. If …","Provides a callback to format the value text. Overrides …","Uses integer rounding for the output value.","Provides the <code>TextSlider</code> with a label.","Sets the text layout of the label.","Sets the number of chars used to show the value readout …","Sets the output range of the <code>TextSlider</code>. The default is …","Sets whether to prefix positive values with “+”.","Sets the prefix for the value readout.","Sets the drag sensitivity of the <code>TextSlider</code>. The default …","Sets the suffix for the value readout.","Sets the output value of the <code>TextSlider</code>.","Sets the text layout of the value readout.","Sets the number of chars used to represent the value read …","Sets the raw value of the <code>TextSlider</code>.","","","","","","","","Returns the output value of the <code>TextSlider</code>.","Returns a reference to the current value text layout.","Returns a mutable reference to the current value text …","Returns the raw, normalised value of the <code>TextSlider</code>.","","Provides a callback which is called whenever the <code>TextSlider</code>…","Provides a default value to the <code>TextSlider</code>.","Sets the font size for both the label and value readout.","Provides a callback to format the value text. Overrides …","Uses integer rounding for the output value.","Provides the <code>TextSlider</code> with a label.","Sets the text layout of the label.","Enables logarithmic output value scaling for the <code>TextSlider</code>…","Sets the number of chars used to show the value readout …","Sets the output range of the <code>TextSlider</code>. The default is …","Prefixes positive values with “+”.","Provides a text prefix for the value readout.","Sets the drag sensitivity of the <code>TextSlider</code>. The default …","Provides a text suffix for the value readout.","Sets the number of chars used to show the value read out. …","Sets the text layout of the value readout.","Returns whether <code>pos</code> is contained within the bounding rect …","Trait for UI components which act as spectral masks.","Commonly-accessed mouse data:","Trait for UI components which can be drawn.","","","","","","","","","","","The time in seconds since the last frame.","","","The component’s draw loop, to be called in the app’s …","A method for drawing the component’s bounding rect. …","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Whether the alt modifier is down.","Whether the control modifier is down.","Whether the left mouse button is clicked.","Whether the OS modifier key is down (command on MacOS).","Whether the right mouse button is clicked.","Whether the shift modifier is down.","Whether the window is focussed or not.","The position of the mouse.","Returns a reference to the component’s bounding rect.","","The amount scrolled since the last frame.","An optional method for querying whether the component …","","","","","","","The component’s update method, to be used in the app’s …","","An (iterative) implementation of the Ramer-Douglas-Peucker …","An (iterative) implementation of the Ramer-Douglas-Peucker …","","","","","","","For processing spectral information for analysis.","","","","","","","","","Draws the spectrum. If <code>None</code> is passed to either <code>line_color</code> …","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Returns a reference to the bounding rect of the analyzer.","","","","","","","","","","","","The input to a spectrum analyzer.","The output of a spectrum analyzer.","","","","Computes the spectral information for an audio buffer and …","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Returns a new spectrum input/output pair. The output …","Number of channels currently being processed.","Relatively scales the timing of the spectrogram based on …","","","","","","Updates the internal number of channels.","Updates the attack/release smoothing based on the given …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","f64 (smoother callback)","","f64 (smoother callback)","toggle","","Calls <code>U::from(self)</code>.","f64 (smoother callback)","","f64 (smoother callback)","toggle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The unit axes.","The unit axes.","A floating point type which can be safely shared between …","A 2-dimensional vector.","","","","","","","π/2","","","","","","","","","","","","","","","","","","","All ones.","All ones.","Archimedes’ constant (π)","","","","","","The full circle constant (τ)","","","A 2-dimensional vector.","<code>[1, 0]</code>: a unit-length vector pointing along the positive X …","<code>[1, 0]</code>: a unit-length vector pointing along the positive X …","<code>[0, 1]</code>: a unit-length vector pointing along the positive Y …","<code>[0, 1]</code>: a unit-length vector pointing along the positive Y …","","All zeroes.","All zeroes.","","","","","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","","","","","","","","","","","","","","","","","","","","","Returns the angle (in radians) between <code>self</code> and <code>other</code>.","Returns the angle (in radians) between <code>self</code> and <code>other</code>.","","","","Returns a reference to an atomic integer which can be used …","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","","","","","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","","","","","","","","","","","","","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Stores a value into the atomic float if the current value …","Stores a value into the atomic float if the current value …","Stores a value into the atomic integer if the current …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","","","","","","","","","","","","","","Computes the dot product of <code>self</code> and <code>other</code>.","Computes the dot product of <code>self</code> and <code>other</code>.","","","","","","","","Calculate the exponent of a packed f64x4","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","","Calculates the lanewise maximum of both vectors. This is a …","Calculates the lanewise minimum of both vectors. This is a …","Produce the absolute value of the current value, returning …","Adds to the current value, returning the previous value.","Maximum with the current value.","Minimum with the current value.","Negates the current value, returning the previous value.","Subtract from the current value, returning the previous …","Fetches the value, and applies a function to it that …","","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","","","","","","","","","","","","","","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","","Returns the argument unchanged.","","Returns the argument unchanged.","","Splats the single value given across all lanes.","Creates a <code>Vec2</code> from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Returns the argument unchanged.","","","Creates a <code>Vec2</code> from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","","Creates a <code>Vec2</code> from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","","Returns the argument unchanged.","","","","","","","","","Creates a vector from the first N values in <code>slice</code>.","Creates a vector from the first N values in <code>slice</code>.","Returns a mutable reference to the underlying float.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the atomic and returns the contained value.","","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","","","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Performs a linear interpolation between <code>self</code> and <code>other</code> …","Performs a linear interpolation between <code>self</code> and <code>other</code> …","Natural log (ln(x))","Loads a value from the atomic float.","","","","Calculates the lanewise maximum of both vectors. If either …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Calculates the lanewise minimum of both vectors. If either …","Returns a vector containing the mininum values for each …","Returns a vector containing the mininum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","Initialize a <code>AtomicF64</code> from an <code>f64</code>.","","Creates a new vector.","Creates a new vector.","","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","","Returns a vector that is equal to <code>self</code> rotated by 90 …","Returns a vector that is equal to <code>self</code> rotated by 90 …","The perpendicular dot product of <code>self</code> and <code>other</code>. Also …","The perpendicular dot product of <code>self</code> and <code>other</code>. Also …","","","","","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","","","","Returns the vector projection of <code>self</code> onto <code>other</code>.","Returns the vector projection of <code>self</code> onto <code>other</code>.","Returns the vector projection of <code>self</code> onto <code>other</code>.","Returns the vector projection of <code>self</code> onto <code>other</code>.","A wrapper function around the <code>random</code> function that avoids …","A function for generating a random value within the given …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","horizontal add of all the elements of the vector","Returns the vector rejection of <code>self</code> from <code>other</code>.","Returns the vector rejection of <code>self</code> from <code>other</code>.","Returns the vector rejection of <code>self</code> from <code>other</code>.","Returns the vector rejection of <code>self</code> from <code>other</code>.","","","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","","","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","","","","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","Store a value into the atomic float.","","","","","","","","","","","","","","","","","Stores a value into the atomic float, returning the …","","","<code>[x, y]</code>","<code>[x, y]</code>","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","","","","","","","","","Writes the elements of <code>self</code> to the first N elements in …","Writes the elements of <code>self</code> to the first N elements in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The default DSP buffer size.","The default BPM for the device.","The default oversampling factor (i.e. this is <code>2² == 4x</code> …","The default BPM for the device.","The maximum size of an audio block. When processing audio, …","The maximum available DSP buffer size.","It doesn’t make much sense to be able to queue lots of …","The maximum available oversampling factor (i.e. this is …","The maximum block size for the spectral filter.","The number of audio channels for the application.","The maximum number of simultaneous polyphonic voices.","The global oversampling rate, set to <code>SAMPLE_RATE</code> by …","An option to allow the DSP load to be printed to the …","The global sample rate, set to 44.1 kHz as default.","The global tuning frequency, set to 440 Hz as default.","A convenience struct to allow <code>WINDOW_SIZE</code> to have <code>x</code> and <code>y</code> …","The size of the application’s window in display units.","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","A function to update the global oversampled sample rate (…","","","","A trait to implement SIMD for processing stereo channels …","A trait to mark SIMD-compatible types. Covers <code>f32</code>, <code>f64</code>, …","","","Unpacks and writes <code>simd_array</code> into the buffer at <code>pos</code>. Only …","Returns a <code>f64x2</code> SIMD array from the buffer. Thus, this …","","","","","","General-purpose utility functions.","","","","","","Module containing various window functions.","","Trait for shorthand implementation of Relaxed atomic load …","","Shorthand method for <code>self.load(Relaxed)</code>.","Shorthand method for <code>self.store(value, Relaxed)</code>.","Calculates the linear power level from amplitude as …","","Returns true if <code>value</code> is equal to <code>target</code>, with a tolerance …","The inverse of <code>freq_log_norm()</code>.","Returns a normalised value representing the logarithmic …","Calculates the MIDI note value of the provided frequency …","Returns a vector of interleaved elements from the input, …","Returns a vector of interleaved elements from the input, …","Returns a vector containing points of a Lanczos kernel. …","Calculates amplitude in decibels from a linear power level.","Maps a value from the provided input range to the provided …","Maps a value from the provided input range to the provided …","Normalizes a value from a provided range.","Normalizes a value from a provided range.","Calculates the frequency value of the provided MIDI note …","Returns the length of one sample in seconds, based on the …","Scales a value to a provided range, assuming it is …","Scales a value to a provided range, assuming it is …","The unnormalised sinc function (<code>sin(x) / x</code>).","Returns whether the absolute value of <code>value</code> is less than …","Catmull-Rom cubic interpolation from b -&gt; c, given samples …","Cosine interpolation from a -&gt; b.","Standard cubic interpolation from b -&gt; c, given samples a, …","Hermite cubic interpolation from b -&gt; c, given samples a, …","Various interpolation types, including <code>NoInterp</code>.","Linear interpolation from a -&gt; b.","No interpolation.","","","","","","","","","Interpolates between <code>a</code> and <code>b</code> based on the value of <code>t</code>, using","Interpolates between <code>p1</code> and <code>p2</code> based on the value of <code>t</code> …","Interpolates between <code>p1</code> and <code>p2</code> based on the value of t …","Performs <code>Interp::cubic_catmull</code>, but with a vector of four …","Interpolates between <code>p1</code> and <code>p2</code> based on the value of <code>t</code> …","Performs <code>Interp::cubic_hermite</code>, but with a vector of four …","Performs <code>cubic()</code>, but with a vector of four points.","","","","","","Returns the argument unchanged.","","“Inverse linear interpolation”: finds the …","","Calls <code>U::from(self)</code>.","Shorthand for the <code>Interp::linear</code> function.","Linearly interpolates between <code>a</code> and <code>b</code> based on the value …","Linearly interpolates between <code>a</code> and <code>b</code> based on the value …","","","","","","","","","","","","Smoothable traits and type implementations.","Non-atomic value smoothing.","Atomic value smoothing.","","Types which may be smoothed by <code>Smoother</code>. Non-atomic …","Types which may be smoothed in <code>SmootherAtomic</code>. Used to …","","","","","","","","","","","","","","","","","","","","","Returns the <code>Smoother</code>’s current value, i.e. the last …","","","","","Forces the <code>Smoother</code> to finish smoothing and reach its …","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Returns whether the <code>Smoother</code> is actively smoothing or not.","Creates a new <code>Smoother</code> with linear smoothing (see the …","Yields the <code>Smoother</code>’s next smoothed value, intended to …","Computes the <code>block_len</code> next elements and places them into …","Computes a block of new elements and places them into <code>block</code>…","Resets the <code>Smoother</code> to its default settings.","","","Resets the smoothing period of the <code>Smoother</code> in …","Sets the smoothing (interpolation) type of the <code>Smoother</code>. …","Sets the starting value of the <code>Smoother</code> (the value it is …","Sets the new target value of the <code>Smoother</code>. This will …","Skips <code>num_steps</code> steps, returning the new value. In effect, …","Stops the <code>Smoother</code> in-place, holding its current value. …","Returns the current target value of the smoother.","","","","","","","","Creates a smoother with <code>smoothing_type</code> smoothing.","","","","","","","","","","Returns the <code>Smoother</code>’s current value, i.e. the last …","","","","","Forces the <code>Smoother</code> to finish smoothing and reach its …","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Returns whether the <code>Smoother</code> is actively smoothing or not.","Creates a new <code>Smoother</code> with linear smoothing (see the …","Yields the <code>Smoother</code>’s next smoothed value, intended to …","Computes the <code>block_len</code> next elements and places them into …","Computes a block of new elements and places them into <code>block</code>…","Resets the <code>Smoother</code> to its default settings.","","","Resets the smoothing period of the <code>Smoother</code> in …","Sets the smoothing (interpolation) type of the <code>Smoother</code>. …","Sets the starting value of the <code>Smoother</code> (the value it is …","Sets the new target value of the <code>Smoother</code>. This will …","Skips <code>num_steps</code> steps, returning the new value. In effect, …","Stops the <code>Smoother</code> in-place, holding its current value. …","","","","","","","","Creates a smoother with <code>smoothing_type</code> smoothing.","","","A general-purpose thread pool.","","","","","","","","Builds a new <code>ThreadPool</code>.","","","","","","","","","","","","Sends a closure to the thread pool, which adds it to a …","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether all of the <code>ThreadPool</code>’s worker threads …","Returns the number of idle worker threads in the <code>ThreadPool</code>…","Returns the number of threads held in the pool.","Returns the current number of queued_jobs.","","","","","","","","","","","","","Blocks the calling thread until all worker threads are …","","","","","","","","","","","","","","","doc","doc","In-place variant of <code>blackman_harris()</code>.","In-place variant of <code>blackman()</code>.","doc","In-place variant of <code>blackman_nuttall()</code>.","","","","","","","","","","","","","doc","In-place variant of <code>flat_top()</code>.","","Returns the argument unchanged.","","doc","In-place variant of <code>hamming()</code>.","doc","In-place variant of <code>hann()</code>.","","Calls <code>U::from(self)</code>.","Multiplies each element of both buffers together.","doc","In-place variant of <code>nuttall()</code>.","A Parzen window, AKA de la Vallée Poussin window.","In-place variant of <code>parzen()</code>.","A sine window.","In-place variant of <code>sine()</code>.","","","","","","A Tukey window, AKA a cosine-tapered window.","In-place variant of <code>tukey()</code>.","","","A Welch window.","In-place variant of <code>welch()</code>.","Cosine function mapping from <code>a -&gt; b</code>","Curved mapping from <code>a -&gt; b</code> with tension argument and a …","Standard curve mapping from <code>a -&gt; b</code> with tension argument","Rounder curve mapping from <code>a -&gt; b</code> with tension argument","Linear mapping from <code>a -&gt; b</code>","Quarter-sine function mapping from <code>a -&gt; b</code>, biased towards a","Quarter-sine function mapping from <code>a -&gt; b</code>, biased towards b","","","","","","","","","","","","","","","Returns the argument unchanged.","","Clamps the input range between <code>0.0</code> and <code>1.0</code>.","Clamps the input range between <code>0.0</code> and <code>1.0</code>.","","Calls <code>U::from(self)</code>.","Returns an s-curve function.","Returns a rounded s-curve function with a linear centre.","Returns a more round s-curve function.","Returns a whole sine function <code>(-π -&gt; π)</code>. The output is …","Returns the “lower part” of a sine function <code>(-π -&gt; 0)</code>…","Returns the “upper part” of a sine function <code>(0 -&gt; π)</code>. …","Clamps the input range between <code>0.0</code> and <code>1.0</code>.","Smooth soft saturation function. <code>input</code> is clamped between …","Clamps the input range between <code>0.0</code> and <code>1.0</code>.","Clamps the input range between <code>0.0</code> and <code>1.0</code>.","Returns a hyperbolic tangent curve function.","","","","","","",""],"if":[0,0,0,0,0,0,0,0,0,0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[2,3],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[3,4],[5,-1,[]],[5,-1,[]],[[3,6],7],[[3,6],7],[[3,6],7],[[3,6],7],[5,7],0,0,0,0,0,[-1,-1,[]],[-1,-1,[]],0,[3,7],[[],5],0,[-1,-2,[],[]],0,0,0,[3,8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],7],0,0,0,0,[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],0,0,0,[3,7],[[3,2],7],[3,7],[[3,2,12],7],[3,7],[[3,2],7],[[3,2],7],0,0,0,0,0,0,0,[-1,-2,[],[]],0,0,0,0,0,0,0,0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,7],[[13,14],15],[-1,-1,[]],[-1,-1,[]],[[],5],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],0,0,[-1,-2,[],[]],0,0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[16,[18,[17]]],7],[[16,[18,[17]]],7],0,[-1,-2,[],[]],[-1,-2,[],[]],[16,4],0,[5,-1,[]],[5,-1,[]],[5,7],[-1,-1,[]],[-1,-1,[]],0,[16,17],[16,17],[[16,4],7],[[],5],[-1,-2,[],[]],[16,19],0,[16,[[21,[20]]]],0,0,[[16,17,5],17],0,[[16,19],7],0,[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[16,7],[16,7],[16,7],[16,19],0,[-1,-2,[],[]],0,0,0,[[13,22],23],0,0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[24,22],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[24,25],24],[24,23],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[24,26],24],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,7],[5,7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[24,27],24],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[13,24],[[24,22],24],[[24,28],24],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],26],[[],28],[[],27],[[],25],[[],29],[[],30],0,0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],0,0,0,[5,7],[5,7],[5,7],[5,7],[5,7],[5,7],[5,7],0,0,0,0,0,0,0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],31],0,0,0,[5,-1,[]],[5,-1,[]],0,0,[5,7],0,[-1,-1,[]],[-1,-1,[]],0,0,0,0,[[],5],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],0,[-1,-2,[],[]],[[16,[18,[17]]],7],0,0,0,0,0,0,0,0,0,0,0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[20,20],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],33],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,7],[5,7],[[20,14],15],[[33,14],15],[20,17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[],33],[33,[[21,[20]]]],[20,17],[[33,20],7],[20,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[-1,32],7,[]],[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[34,[37,[[36,[35]]]]],7],[[34,[37,[38]]],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[40,[39]],[37,[38]]],34],[39,39],[41,41],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,7],[5,7],[5,7],0,[[39,39],19],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[39,14],15],[[41,14],15],[[34,14],15],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[34,19],[34,7],[[42,17,43,[37,[[36,[35]]]],[37,[38]],[21,[44]]],41],0,[[34,[18,[17]],5,5,[45,[17]]],7],0,0,[34,7],[[34,[21,[42]],17],7],[[34,17,17,[21,[44]]],41],[34,7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[41,7],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[2,3,46],7],0,0,0,0,0,0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],47],[5,-1,[]],[5,-1,[]],[5,7],[-1,-1,[]],[-1,-1,[]],[[47,17,[48,[17]]],[[48,[17]]]],[[47,17],[[48,[17]]]],[[47,17],[[48,[17]]]],[[47,17],[[48,[17]]]],[[47,17],[[48,[17]]]],[[47,17],[[48,[17]]]],[[47,17],[[48,[17]]]],[[47,17],[[48,[17]]]],[[47,17],[[48,[17]]]],[[47,17],[[48,[17]]]],[[47,17],[[48,[17]]]],[[47,17],[[48,[17]]]],[[47,17],[[48,[17]]]],[[47,17],[[48,[17]]]],[[47,17],[[48,[17]]]],[[],5],[-1,-2,[],[]],[47,[[48,[17]]]],[[],47],[47,[[48,[17]]]],[[47,17],[[48,[17]]]],[47,[[48,[17]]]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,32],7,[]],[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[49,49],[50,50],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[49,7],[[49,51],7],[[],49],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,7],[5,7],[[49,14],15],[[49,14],15],[[50,14],15],[[50,14],15],[-1,-1,[]],[-1,-1,[]],[52,[[21,[50]]]],[53,49],[-1,-1,[]],[-1,-1,[]],[51,50],[49,7],[[49,51],7],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[52,[[21,[17]]]],[53,54],[[49,50],17],[50,17],[49,17],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,54,[]],[-1,54,[]],[[49,51],49],[[50,51],50],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,7],[-1,-1,[]],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[-1,5],19,[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,0,0,0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[55,55],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],55],[5,-1,[]],[5,-1,[]],[5,7],[[55,55],19],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[55,14],15],[[55,14],15],[-1,-1,[]],[5,[[21,[55]]]],[-1,-1,[]],[55,[[48,[17]]]],[55,5],[[],5],[-1,-2,[],[]],[[],5],[[55,17,17],17],[-1,-2,[],[]],[-1,-2,[],[]],[-1,54,[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,32],7,[]],[[-1,32],7,[]],[[-1,32],7,[]],[[-1,32],7,[]],[[-1,32],7,[]],[[-1,32],7,[]],[[-1,32],7,[]],[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[35,35],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],56],[[],57],[[],58],[[],59],[[],60],[[],61],[[],62],[[],35],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,7],[5,7],[5,7],[5,7],[5,7],[5,7],[5,7],[5,7],[[56,56],19],[[59,59],19],[[35,35],19],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[56,14],15],[[56,14],15],[[57,14],15],[[57,14],15],[[58,14],15],[[58,14],15],[[59,14],15],[[59,14],15],[[60,14],15],[[60,14],15],[[61,14],15],[[61,14],15],[[62,14],15],[[62,14],15],[[35,14],15],[[35,14],15],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[5,[[21,[56]]]],[5,[[21,[57]]]],[5,[[21,[58]]]],[5,[[21,[59]]]],[5,[[21,[60]]]],[5,[[21,[61]]]],[5,[[21,[62]]]],[5,[[21,[35]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[56,5],[57,5],[58,5],[59,5],[60,5],[61,5],[62,5],[35,5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[60,5],[61,5],[62,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],22],0,0,0,[5,-1,[]],[5,-1,[]],0,0,[5,7],0,[[22,14],15],[-1,-1,[]],[-1,-1,[]],0,0,0,0,[[],5],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],0,0,0,0,[-1,-2,[],[]],[[2,3,12],7],[[2,3,63],7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[64,64],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],64],[5,-1,[]],[5,-1,[]],[5,7],[[64,14],15],[-1,-1,[]],[-1,-1,[]],[64,17],[[],5],[-1,-2,[],[]],[64,17],[[17,17],64],[[64,17,5],17],[[64,17],7],[[64,17],7],[[64,17],7],[[64,17],7],[[64,17],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],[[64,17],64],[[64,17],64],0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[65,7],[65,65],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],65],[5,-1,[]],[5,-1,[]],[5,7],[[65,14],15],[-1,-1,[]],[-1,-1,[]],[65,17],[[],5],[-1,-2,[],[]],[65,17],[[5,17],65],[[65,17],7],[65,17],[65,7],[[65,5],7],[[65,17],7],[[65,66],7],[[65,17],7],[[65,67,17],7],[65,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],[[65,66],65],[[65,67,17],65],0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[68,68],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],68],[5,-1,[]],[5,-1,[]],[5,7],[[68,14],15],[-1,-1,[]],[-1,-1,[]],[68,17],[[],5],[-1,-2,[],[]],[68,17],[[17,17],68],[[68,19],7],[[68,17,17],[[7,[17,17]]]],[[68,17],7],[[68,17],7],[[68,17],7],[[68,17],7],[[68,17],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],[[68,17],68],[[68,17],68],[[68,19],68],0,0,0,0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,7],[-1,-1,[]],[-1,-1,[]],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],69],[5,-1,[]],[5,-1,[]],[5,7],[-1,-1,[]],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[],69],[[69,17],17],[[69,19],7],[[69,17],7],[[69,[70,[17]]],7],[[69,17],7],[[69,17],7],[[69,-1],7,[71,72]],[[69,-1],7,[71,72]],[[69,-1],7,[71,72]],[[69,-1],7,[71,72]],[[17,17],17],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[-1,32],7,[]],[[-1,32],7,[]],[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[73,73],[74,74],[44,44],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[44,17],[[],73],[[],74],[[],44],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,7],[5,7],[5,7],[[73,14],15],[[74,14],15],[[44,14],15],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[44,74],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[44,19],[17,44],[44,17],[[44,[48,[17]],5],7],[[44,[48,[17]]],7],[44,73],[44,73],[[44,17],7],[[44,17],7],[[44,17],7],[[44,17],7],[[44,17],7],[[44,17],7],[[44,17,17,17,17],7],[[44,17],7],[[44,17],7],[[44,17],7],[[44,19],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[75,75],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],75],[5,-1,[]],[5,-1,[]],[5,7],[[75,14],15],[-1,-1,[]],[-1,-1,[]],[[75,17],17],[75,17],[[],5],[-1,-2,[],[]],[17,75],[[75,17,17],[[7,[17,17]]]],[[75,17],7],[[75,17],7],[[75,17],7],[[75,17],7],[[75,17],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[[75,19],7],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[76,76],[[-1,-2],7,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],76],[5,-1,[]],[5,-1,[]],[5,7],0,0,[[76,14],15],[-1,-1,[]],[-1,-1,[]],[[],5],[-1,-2,[],[]],0,[[-1,17],17,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,0,[[-1,32],7,[]],[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[77,17],[77,[[7,[17,17]]]],[78,78],[77,77],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],78],[[],77],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,7],[5,7],0,[[78,14],15],[[77,14],15],[77,7],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[77,17],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[17,77],[[77,17],17],0,[[77,17],7],[[77,17],17],[[77,17],7],[[77,17],7],[[77,78],7],[[77,17],7],[[77,76],7],[77,7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[-1,32],7,[]],[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[79,79],[80,80],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],80],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,7],[5,7],[[79,14],15],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[79,17],17],[[80,17],17],[[79,17],7],[[80,17],7],[[79,17],7],[[80,17],7],[[79,17],7],[[80,17],7],[[80,[83,[[82,[81]]]]],7],[[79,66],7],[[80,66],7],[[79,19],7],[[80,19],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[19,17],79],[[19,17],80],0,0,0,0,0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,7],[5,7],[-1,5,[]],[84,5],[85,5],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[48,[17]]],[]],[84,[[48,[17]]]],[85,[[48,[17]]]],[-1,[[48,[17]]],[]],[84,[[48,[17]]]],[85,[[48,[17]]]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,17,17],17,[]],[[84,17,17],17],[[85,17,17],17],[[-1,[48,[17]],17],[[83,[17]]],[]],[[84,[48,[17]],17],[[83,[17]]]],[[85,[48,[17]],17],[[83,[17]]]],[[-1,[48,[17]],[48,[17]],17],7,[]],[[84,[48,[17]],[48,[17]],17],7],[[85,[48,[17]],[48,[17]],17],7],[[],[[87,[[86,[-1]]]]],[]],[[],[[87,[[86,[84]]]]]],[[],[[87,[[86,[85]]]]]],[-1,7,[]],[84,7],[[-1,17,17],17,[]],[[84,17,17],17],[[85,17,17],17],[[-1,[48,[17]],17],[[83,[17]]],[]],[[84,[48,[17]],17],[[83,[17]]]],[[85,[48,[17]],17],[[83,[17]]]],[[-1,[48,[17]],[48,[17]],17],7,[]],[[84,[48,[17]],[48,[17]],17],7],[[85,[48,[17]],[48,[17]],17],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,[[87,[[86,[-1]]]]],[]],[5,[[87,[[86,[84]]]]]],[5,[[87,[[86,[85]]]]]],[[[48,[17]]],[[87,[[86,[-1]]]]],[]],[[[48,[17]]],[[87,[[86,[84]]]]]],[[[48,[17]]],[[87,[[86,[85]]]]]],0,0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],0,[5,7],[5,7],[[17,17],[[87,[[86,[84]]]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[17,17],88],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[89,89],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],89],[5,-1,[]],[5,-1,[]],[5,7],[[89,14],15],[-1,-1,[]],[-1,-1,[]],[89,17],[89,17],[89,7],[[],5],[-1,-2,[],[]],[17,89],[[89,17],17],[[89,17,5],17],[89,7],[[89,17],7],[[89,17],7],[[89,76],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[90,90],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,7],[[90,14],15],[-1,-1,[]],[-1,-1,[]],[90,17],[[],5],[-1,-2,[],[]],[17,90],[[90,17,17],[[7,[[7,[17,17]],[7,[17,17]]]]]],[[90,17,17],[[7,[17,17]]]],[[90,17],7],[[90,17],7],[[90,76],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[[-1,32],7,[]],[[-1,32],7,[]],[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[91,91],[92,92],[93,93],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],91],[[],92],[[],93],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,7],[5,7],[5,7],[[91,14],15],[[92,14],15],[[93,14],15],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[93,17],0,[[],5],[[],5],[[],5],[93,[[48,[[96,[[95,[94]]]]]]]],[93,[[48,[[96,[[95,[94]]]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[93,5],[5,92],[[17,5],93],[93,[[48,[17]]]],[93,[[48,[[97,[17]]]]]],0,0,0,[[93,17,5],17],[[93,17,17],[[7,[17,17]]]],[[93,19],7],0,[93,7],0,0,[[93,17],7],[[93,17],7],[[93,17],7],[[93,5],7],[[93,17],7],[[93,91],7],[[93,17],7],[[93,55],7],[[93,92],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[94,94],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],94],[5,-1,[]],[5,-1,[]],[5,7],[[94,14],15],[-1,-1,[]],[-1,-1,[]],[94,17],[[],5],[-1,-2,[],[]],[[94,17],17],[17,94],[[94,17],17],[[94,17],17],[[94,17,5],17],[94,17],[[94,17],7],[[94,17],7],[[94,17],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[[-1,32],7,[]],[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[98,98],[99,99],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,7],[5,7],[[98,14],15],[[99,14],15],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[99,17],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[5,17],99],[[99,17,17],[[7,[17,17]]]],[[99,17],7],[[99,17],7],[[99,98],7],[[99,5],7],[[99,17],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[100,100],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],100],[5,-1,[]],[5,-1,[]],[5,7],[[100,14],15],[-1,-1,[]],[-1,-1,[]],[100,17],[[],5],[-1,-2,[],[]],[[17,5],100],[[100,17,5],17],[[100,5],7],[[100,17],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[101,101],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,7],[[101,14],15],[-1,-1,[]],[-1,-1,[]],[101,17],[[],5],[-1,-2,[],[]],[17,101],[[101,17,5],17],[101,7],[[101,17],7],[[101,17,17],7],[[101,17,17],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[102,102],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,7],[[102,14],15],[-1,-1,[]],[-1,-1,[]],[102,17],[[],5],[-1,-2,[],[]],[[5,17],102],[[102,17,17],[[7,[17,17]]]],[[102,17],7],[[102,17],7],[[102,5],7],[[102,17],7],[[102,76],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[103,103],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,7],[[103,14],15],[-1,-1,[]],[-1,-1,[]],[103,17],[[],5],[-1,-2,[],[]],[[103,19],7],[17,103],[[103,17,17],[[7,[17,17]]]],[[103,17],7],[[103,17],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[104,5],[[48,[17]]]],[[104,5],[[48,[17]]]],[104,7],[105,105],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[104,[18,[17]]],7],[[104,[18,[17]]],7],[[],104],[104],[5,-1,[]],[5,-1,[]],[5,-1,[]],[104],[5,-1,[]],[[105,[48,[17]],5],7],[5,7],[5,7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[105,5],4],[105,5],[[5,5],104],[[5,5,53],105],[104,5],[104,5],[[105,[48,[17]],5,-1],7,106],[105,7],[[104,5,5],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[[105,[48,[17]],5],[[48,[17]]]],[[105,[48,[17]],5],[[48,[17]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[107,5],[-1,-2,[],[]],[-1,-2,[],[]],[107,7],[[107,5],17],[-1,-2,[],[]],[-1,-2,[],[]],[[],107],[5,-1,[]],[5,-1,[]],[5,7],[-1,-1,[]],[-1,-1,[]],[[],5],[-1,-2,[],[]],0,[107,5],[[5,5],107],[[107,-1],7,108],[[107,5],7],[[107,109],7],[[107,17],7],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[5,5,17],17],[-1,-2,[],[]],[-1,-2,[],[]],[109,109],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],109],[109],[5,-1,[]],[109],[5,-1,[]],[5,7],[[109,14],15],[-1,-1,[]],[-1,-1,[]],[[],5],[-1,-2,[],[]],[109,5],[5,109],[[109,5],7],[109,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],[[109,5],109],0,0,0,0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[110,7],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,7],[-1,-1,[]],[-1,-1,[]],[[],5],[-1,-2,[],[]],[110,4],[110,5],[110,5],[[5,5,5],110],[110,5],[[110,-1,5,-2],7,111,112],[[110,-1,5,-2],7,108,112],[[110,5],7],[[110,5],7],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,0,[[-1,5,5],17,[]],[[-1,5,5],17,[]],[-1,5,[]],[-1,5,[]],0,0,0,0,0,0,0,[-1,[[7,[17,17]]],[]],[[-1,17,17],7,[]],0,0,0,0,0,0,0,0,0,0,0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[113,113],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,7],[[113,14],15],[-1,-1,[]],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[],17],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[114,114],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,7],[[114,14],15],[-1,-1,[]],[-1,-1,[]],[114,7],[[],5],[-1,-2,[],[]],[[17,17],114],[114,17],[114,17],0,0,[114,[[7,[17,17]]]],[[114,17,17],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[115,115],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,7],[[115,14],15],[-1,-1,[]],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[17,17],115],[115,[[7,[17,17]]]],[[115,17,17],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[116,116],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,7],[[116,14],15],[-1,-1,[]],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[17,17],116],[116,[[7,[17,17]]]],[[116,17,17],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[117,117],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,7],[[117,14],15],[-1,-1,[]],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[17,17],117],[117,[[7,[17,17]]]],[[117,17,17],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,0,0,0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[43,17,17],7],[43,43],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],43],[5,-1,[]],[5,-1,[]],[5,7],[[43,14],15],[-1,-1,[]],[-1,-1,[]],[[],5],[-1,-2,[],[]],[43,[[7,[17,17]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[118,[-1]]],[[118,[-1]]],[119,120]],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[118,[-1]]],[121,120]],[[[118,[-1]]],[],120],[5,-1,[]],[[[118,[-1]]],[],120],[5,-1,[]],[5,7],[[[118,[-1]],14],15,[122,120]],[-1,-1,[]],[-1,-1,[]],[[[118,[-1]]],17,[120,119]],[[],5],[-1,-2,[],[]],[-1,[[118,[-1]]],120],[[[118,[-1]],17,5],17,[120,119]],[[[118,[-1]],17,17],[[7,[17,17]]],[120,119]],[[[118,[-1]],17],7,120],[[[118,[-1]],17],7,120],[[[118,[-1]],17],7,120],[[[118,[-1]],17],7,120],[[[118,[-1]],17],7,120],[[[118,[-1]],17],7,120],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[[[118,[-1]]],-1,120],[-1,-2,[],[]],0,[-1,17,[]],[[-1,17,5],17,[]],[[-1,17,17],[[7,[17,17]]],[]],0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[95,[-1]]],[[95,[-1]]],119],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[95,[-1]]],[120,119,121]],[5,-1,[]],[5,-1,[]],[5,7],[[[95,[-1]],14],15,122],[-1,-1,[]],[[-1,-1],[[95,[-1]]],[120,119,121]],[-1,-1,[]],[-1,[[95,[-1]]],[120,119,121]],[[[95,[-1]]],17,[120,119,121]],[[],5],[-1,-2,[],[]],0,[[[95,[-1]],17,5],17,[120,119,121]],[[[95,[-1]],17,17],[[7,[17,17]]],[120,119,121]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[[[95,[-1]]],[[7,[-1,-1]]],[120,119,121]],[-1,-2,[],[]],0,0,0,0,[[-1,32],7,[]],[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[123,123],[[[96,[-1]]],[[96,[-1]]],[119,120]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],123],[5,-1,[]],[5,-1,[]],[[[96,[-1]]],[],120],[5,-1,[]],[5,-1,[]],[[[96,[-1]]],[],120],[5,7],[5,7],[[123,14],15],[[[96,[-1]],14],15,[122,120]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[96,[-1]]],17,[120,119]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[96,[-1]],19],7,120],[[[96,[-1]],19],7,120],[-1,[[96,[-1]]],120],[[[96,[-1]],17,5],17,[120,119]],[[[96,[-1]],17,17],[[7,[17,17]]],[120,119]],[[[96,[-1]],17],7,120],[[[96,[-1]],17],7,120],[[[96,[-1]],17],7,120],[[[96,[-1]],123],7,120],[[[96,[-1]],17],7,120],[[[96,[-1]],19],7,120],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[124,109,5,17],7],0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[124,2,6,63],7],[5,7],[-1,-1,[]],[-1,-1,[]],[124,5],[[],5],[-1,-2,[],[]],[[125,8],124],[124,7],[124,8],[[124,[70,[17]]],7],[[124,19],7],[[124,4],7],[[124,5],19],[[124,17],7],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[[124,2,126],7],[-1,-2,[],[]],[124,5],[[124,[70,[17]]],124],[[124,19],124],[[124,4],124],[[124,5],[[21,[124]]]],[[124,17],124],0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[127,109,5,17],7],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[127,2,6,63],7],[5,7],[-1,-1,[]],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[2,8],127],[127,[[37,[128]]]],[127,7],[127,8],[[127,[70,[129]]],7],[[127,4],7],[[127,129],7],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[[127,2,126],7],[127,[[37,[130]]]],[-1,-2,[],[]],[[127,[70,[129]]],127],[[127,4],127],[[127,129],127],[127,[[37,[130]]]],0,0,0,0,0,0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[131,131],[[-1,-2],7,[],[]],[[132,109,5,17],7],[[133,109,5,17],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[],134],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[131],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[131],[5,-1,[]],[[132,2,6,63],7],[[133,2,6,63],7],[5,7],[5,7],[5,7],[5,7],[5,7],[5,7],0,[[],134],[[131,14],15],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[135,17,17],17],[[136,17,17],17],[[136,17,17],17],[[136,17,17],17],[135,131],0,0,[131,5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[133,19],[[2,8],132],[5,135],[5,136],[[125,8,5],133],[[5,5],131],[5,131],[132,[[37,[[36,[57]]]]]],0,0,[[],17],[132,7],[131,7],[[131,[7,[5,5]],[7,[5,5]]],7],[132,8],[133,8],[135,7],[136,7],[133,7],[[132,129],7],[[136,17],7],[[133,17],7],[[132,57],7],[[133,125,5],7],[[132,129],7],[[136,17],7],[[133,17],7],[[136,134],7],[132,[[37,[130]]]],0,0,[135,134],[135,7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[134,17,17],17],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[[132,2,126],7],[[135,17],7],[[136,17],7],[[133,2,126],7],[[133,19],7],[[131,17],7],[[131,[7,[5,5]],[7,[5,5]],17],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[131,5],[131,131],[[131,[7,[5,5]],[7,[5,5]]],131],[[131,17],131],[[131,[7,[5,5]],[7,[5,5]],17],131],0,0,[[-1,32],7,[]],[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[137,137],[138,138],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[137,139,129],19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[138,2,6,63],7],[5,7],[5,7],[[137,14],15],[[138,14],15],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[5,8],138],0,[138,[[48,[137]]]],0,0,[138,7],[137,7],[138,7],[137,7],[138,8],[[138,17],7],[[138,5],7],[[138,140],7],[[138,129],7],[[137,139],7],[[138,92],7],[[138,[37,[[141,[92]]]]],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[[138,2,126],7],0,[-1,-2,[],[]],[-1,-2,[],[]],[[138,5],138],[[138,140],138],[[138,129],138],0,0,0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[142,109,5,17],7],[-1,-2,[],[]],[-1,-2,[],[]],[[142,138],7],[5,-1,[]],[5,-1,[]],[[142,2,6,63],7],[5,7],[-1,-1,[]],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[2,8],142],[142,8],[[142,17],7],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[[142,2,126],7],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[143,143],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],143],[[],144],[5,-1,[]],[5,-1,[]],[5,7],[[143,14],15],[-1,-1,[]],[-1,-1,[]],[[],5],[-1,-2,[],[]],0,0,0,[145,[[21,[54]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[146,144],[146,144],[[146,2,6,63],7],[5,7],[146,19],[146,144],[146,144],[-1,-1,[]],[-1,-1,[]],[[],5],[-1,-2,[],[]],[146,144],[146,144],[8,146],[146,8],[[146,-1],7,71],[[146,126],19],[-1,-2,[],[]],[[146,19],146],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[[146,2,126],7],[-1,-2,[],[]],[[146,-1],146,71],[[146,144],146],[[146,145],146],[[146,144],146],[[146,145],146],[[146,4],146],[[146,145],146],[[146,144],146],[[146,19],146],0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[147,2,6,63],7],[5,7],[-1,-1,[]],[-1,-1,[]],[[],5],[-1,-2,[],[]],[8,147],[147,8],[[147,145],7],[[147,148],7],[[147,144],7],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[[147,2,126],7],[-1,-2,[],[]],[[147,145],147],[[147,148],147],[[147,144],147],0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[[149,[-1]],2,6,63],7,150],[[[149,[-1]],6],7,150],[5,7],[-1,-1,[]],[-1,-1,[]],[[],5],[[[149,[-1]],-1],[[149,[-1]]],150],[-1,-2,[],[]],[[[149,[-1]]],19,150],[[[149,[-1]]],144,150],[[[149,[-1]]],144,150],[[[149,[-1]]],144,150],[[[149,[-1]]],144,150],[8,[[149,[-1]]],150],[[[149,[-1]]],-1,150],[[[149,[-1]]],8,150],[[[149,[-1]]],[[21,[144]]],150],[[[149,[-1]]],[[21,[144]]],150],[[[149,[-1]],-2],7,150,71],[[[149,[-1]],126],19,150],[[[149,[-1]]],[[149,[-1]]],150],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[[[149,[-1]],2,126],7,150],[-1,-2,[],[]],[[[149,[-1]],-2],[[149,[-1]]],150,71],[[[149,[-1]],4],[[149,[-1]]],150],[[[149,[-1]],4],[[149,[-1]]],150],[[[149,[-1]],144],[[149,[-1]]],150],[[[149,[-1]],145],[[149,[-1]]],150],[[[149,[-1]],4],[[149,[-1]]],150],[[[149,[-1]],144],[[149,[-1]]],150],[[[149,[-1]],144],[[149,[-1]]],150],0,[5,[[21,[-1]]],[]],[-1,5,[]],[[],5],0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[151,7],[151,7],[[151,2,6,63],7],[5,7],[-1,-1,[]],[-1,-1,[]],[[],5],[-1,-2,[],[]],[151,19],[151,144],[151,144],[[151,19],7],[[17,8],151],[151,8],[[151,-1],7,71],[[151,17],7],[[151,4],7],[[151,-1],7,71],[[151,19],7],[[151,145],7],[[151,144],7],[151,7],[[151,[70,[17]]],7],[[151,19],7],[[151,145],7],[[151,17],7],[[151,145],7],[[151,17],7],[[151,144],7],[[151,5],7],[[151,17],7],[[151,126],19],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[[151,2,126],7],[151,17],[151,144],[151,144],[151,17],[-1,-2,[],[]],[[151,-1],151,71],[[151,17],151],[[151,4],151],[[151,-1],151,71],[151,151],[[151,145],151],[[151,144],151],[151,151],[151,151],[[151,[70,[17]]],151],[151,151],[[151,145],151],[[151,17],151],[[151,145],151],[[151,5],151],[[151,144],151],[[151,139],19],0,0,0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[126,126],[[-1,-2],7,[],[]],[[-1,109,5,17],7,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],126],0,[5,-1,[]],[5,-1,[]],[[-1,2,6,63],7,[]],[[-1,6],7,[]],[5,7],[[126,14],15],[-1,-1,[]],[-1,-1,[]],[[],5],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,8,[]],[[-1,109,5,17],7,[]],0,[[-1,126],19,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[[-1,2,126],7,[]],[-1,-2,[],[]],[[[48,[[45,[17]]]],17],[[83,[5]]]],[[[48,[[45,[17]]]],[83,[5]],17],7],0,0,0,0,0,0,0,0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[152,6,[21,[140]],129,[21,[140]]],7],[5,7],[-1,-1,[]],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[153,8],152],[152,8],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[154,[48,[17]]],7],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,7],[-1,-1,[]],[-1,-1,[]],[[],5],[-1,-2,[],[]],[5,[[7,[154,153]]]],0,[[154,17],7],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[[154,5],7],[154,7],[-1,-2,[],[]],0,0,0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[155,-1],155,71],[[155,-1],155,71],[[155,-1],155,71],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[155,2,6,63],7],[5,7],0,[-1,-1,[]],[-1,-1,[]],0,0,0,0,[[],5],[-1,-2,[],[]],0,0,0,0,0,[22,155],[155,8],0,[[155,[37,[156]]],155],[[155,[37,[[157,[127]]]],[37,[[157,[132]]]],22],155],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[[155,2,126],7],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[],158],[[],159],[[],160],[[],161],[[],162],[[],163],[[],164],[[],165],[[],166],[[],167],[[],168],[[],169],[[],170],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],0,0,[5,7],[5,7],[5,7],[5,7],[5,7],[5,7],[5,7],[5,7],[5,7],[5,7],[5,7],[5,7],[5,7],0,0,0,0,0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,32],7,[]],[[-1,32],7,[]],[[-1,32],7,[]],[171,171],[139,139],[172,172],[[139,139,129],19],[[172,172,17],19],[171,171],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[171,171]],[[171,171]],[[171,17]],[[139,139],139],[[139,129],139],[[172,17],172],[[172,172],172],[[171,171],7],[[171,171],7],[[139,139],7],[[139,129],7],[[172,17],7],[[172,172],7],[171,19],[139,129],[[139,139],129],[[172,172],17],[171,19],[171,[[45,[17]]]],[171,[[45,[17]]]],[38,173],[172,139],[139,172],[139,174],[172,174],[139,[[45,[129]]]],[172,[[45,[17]]]],[139,[[45,[129]]]],[172,[[45,[17]]]],[139,175],[172,175],[171,171],[171,[[7,[171,171]]]],[171,171],[[171,171],171],[-1,[[21,[139]]],176],[-1,[[21,[172]]],176],[[171,171]],[[171,171]],[[171,171],7],[[171,171],7],[[171,171]],[[171,171]],[[171,171],7],[[171,171],7],[[171,171]],[[171,171]],[[171,171],7],[[171,171],7],[[171,171,171],171],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[139,139],[172,172],[[139,139,139],139],[[172,172,172],172],[[139,129,129],139],[[172,17,17],172],[[139,129],139],[[172,17],172],[[139,129],139],[[172,17],172],[171,171],[139,139],[172,172],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[171,171]],[[171,17]],[[171,171]],[[171,17]],[[171,171]],[[171,17]],[[171,17]],[[171,171]],[[171,17]],[[171,171]],[[171,171]],[[171,17]],[[139,139],177],[[172,172],177],[[139,139],177],[[172,172],177],[[139,139],177],[[172,172],177],[[139,139],177],[[172,172],177],[[139,139],177],[[172,172],177],[[139,139],177],[[172,172],177],[[38,17,17,178],17],[[38,17,17,178,178],[[10,[17,17]]]],[[38,17,17,178,178],[[10,[17,17]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[171,171],171],[171,171],[[],38],[[],171],[[],139],[[],172],[5,-1,[]],[5,-1,[]],[139],[5,-1,[]],[172],[5,-1,[]],[5,-1,[]],[5,-1,[]],[139],[5,-1,[]],[172],[5,-1,[]],[-1,[[10,[139]]],179],[-1,[[10,[172]]],179],[[139,139],129],[[172,172],17],[[139,139],129],[[172,172],17],[[171,17]],[[171,171]],[[171,171]],[[139,139],139],[[139,129],139],[[172,17],172],[[172,172],172],[[171,171],7],[[171,171],7],[[139,139],7],[[139,129],7],[[172,17],7],[[172,172],7],[[139,139],129],[[172,172],17],[5,7],[5,7],[5,7],[5,7],[[171,171],19],[[139,139],19],[[172,172],19],[171,171],[139,139],[172,172],[[139,129],180],[[172,17],181],0,[[171,171],171],[[171,171],171],[[38,178],17],[[38,17,178],17],[[38,17,178],17],[[38,17,178],17],[[38,178],17],[[38,17,178],17],[[38,178,178,-1],[[10,[17,17]]],112],[[171,171],171],[139,139],[172,172],[[38,14],[[10,[7,182]]]],[[171,14],[[10,[7,182]]]],[[171,14],[[10,[7,182]]]],[[171,14],[[10,[7,182]]]],[[171,14],[[10,[7,182]]]],[[171,14],[[10,[7,182]]]],[[171,14],[[10,[7,182]]]],[[171,14],[[10,[7,182]]]],[[171,14],[[10,[7,182]]]],[[139,14],[[10,[7,182]]]],[[139,14],[[10,[7,182]]]],[[172,14],[[10,[7,182]]]],[[172,14],[[10,[7,182]]]],[139,139],[172,172],[17,38],[-1,-1,[]],[[[48,[17]]],171],[-1,-1,[]],[[[45,[17]]],171],[17,171],[183,139],[184,139],[-1,-1,[]],[[[45,[129]]],139],[[[7,[129,129]]],139],[180,139],[[[185,[129]]],139],[181,172],[186,172],[[[45,[17]]],172],[-1,-1,[]],[[[185,[17]]],172],[[[7,[17,17]]],172],[129,171],[17,171],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[48,[129]]],139],[[[48,[17]]],172],[38,17],[[139,5]],[[172,5]],[[139,5]],[[172,5]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[38,17],[171,171],[139,19],[172,19],[171,171],[171,171],[139,19],[172,19],[139,177],[172,177],[139,19],[172,19],[-1,19,[]],[139,129],[172,17],[139,129],[172,17],[139,129],[172,17],[[139,139,129],139],[[172,172,17],172],[171,171],[[38,178],17],[171,171],[171,171],[38],[[171,171],171],[[139,139],139],[[172,172],172],[139,129],[172,17],[[171,171],171],[[139,139],139],[[172,172],172],[139,129],[172,17],[171,51],[[171,17]],[[171,171]],[[171,171]],[[139,139],139],[[139,129],139],[[172,17],172],[[172,172],172],[[171,171,171],171],[[171,171],7],[[171,171],7],[[139,129],7],[[139,139],7],[[172,172],7],[[172,17],7],[[171,171,171],171],[[171,171,171],171],[[171,171,171],171],[171],[171],[139,139],[172,172],[17,38],[[[45,[17]]],171],[[129,129],139],[[17,17],172],[171,19],[139,139],[172,172],[139,139],[172,172],[171,171],[139,139],[172,172],[[139,139],129],[[172,172],17],[139,45],[172,45],[[171,171],171],[[171,17],171],[[139,129],139],[[172,17],172],[-1,171,187],[-1,139,187],[-1,172,187],[[139,139],139],[[172,172],172],[[139,139],139],[[172,172],172],[[],17],[[-1,-1],-1,[188,189]],[139,139],[172,172],[171,17],[[139,139],139],[[172,172],172],[[139,139],139],[[172,172],172],[[139,129],139],[171,171],[139,139],[172,172],[171,190],[[177,139,139],139],[[177,172,172],172],[[139,-1],10,191],[[172,-1],10,191],[139,139],[172,172],[171,171],[171,[[7,[171,171]]]],[17,171],[129,139],[17,172],[171,171],[38,7],[[38,17,178],7],[[171,17]],[[171,171]],[[171,171]],[[139,129],139],[[139,139],139],[[172,17],172],[[172,172],172],[[171,171],7],[[171,171],7],[[139,139],7],[[139,129],7],[[172,172],7],[[172,17],7],[-1,171,187],[-1,139,187],[-1,172,187],[[38,17,178],17],[171,171],[171,[[45,[17]]]],[139,[[45,[129]]]],[172,[[45,[17]]]],[171,171],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[171,171],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[139,[[21,[139]]]],[172,[[21,[172]]]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[139,[48,[129]]],7],[[172,[48,[17]]],7],[139,139],[172,172],[139,180],[172,181],[139,184],[172,186],[139,184],[172,186],[139,180],[172,181],[139,184],[172,186],[139,184],[172,186],[139,180],[172,181],[139,184],[172,186],[139,184],[172,186],[139,180],[172,181],[139,184],[172,186],[139,184],[172,186],[139,139],[172,172],[139,180],[172,181],[139,184],[172,186],[139,184],[172,186],[139,180],[172,181],[139,184],[172,186],[139,184],[172,186],[139,139],[172,172],[139,180],[172,181],[139,184],[172,186],[139,184],[172,186],[139,180],[172,181],[139,184],[172,186],[139,184],[172,186],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,7],[-1,-1,[]],[-1,-1,[]],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[5,7],[-1,-2,[],[]],0,0,0,0,[129,-1,[]],[17,-1,[]],[[-1,192,5],7,[]],[[-1,5],192,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[],[]],[-1,7,[]],[17,17],[[17,17,17,17],17],[[17,17],19],[[17,17,17],17],[[17,17,17],17],[17,17],[[[48,[172]]],[[83,[17]]]],[[[48,[139]]],[[83,[129]]]],[[53,17,19],[[83,[17]]]],[17,17],[[17,17,17,17,17],17],[[129,129,129,129,129],129],[[17,17,17],17],[[129,129,129],129],[17,17],[[],17],[[17,17,17],17],[[129,129,129],129],[17,17],[[17,17,17],19],0,0,0,0,0,0,0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[66,66],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[17,17,17],17],[[17,17,17,17,17],17],[[17,17,17,17,17],17],[[[83,[17]],17],17],[[17,17,17,17,17,17,17],17],[[[83,[17]],17,17,17],17],[[[48,[17]],17],17],[[],66],[5,-1,[]],[5,-1,[]],[5,7],[[66,14],15],[-1,-1,[]],[-1,-1,[]],[[17,17,17],17],[[],5],[-1,-2,[],[]],[[17,17,17],17],[[17,17,17],17],[[17,17,17],17],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[[],-1,[]],[-1,[],[]],[-1,7,[]],[129,-1,[]],[129,-1,[]],[17,-1,[]],[17,-1,[]],[-1,129,[]],[-1,129,[]],[-1,17,[]],[-1,17,[]],0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[97,[-1]]],[[97,[-1]]],[119,193]],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[97,[-1]]],-1,193],[[],[[97,[-1]]],[121,193]],[5,-1,[]],[5,-1,[]],[5,7],[[[97,[-1]]],7,193],[[[97,[-1]],14],15,[122,193]],[-1,-1,[]],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[[97,[-1]]],19,193],[[17,-1,17],[[97,[-1]]],193],[[[97,[-1]]],-1,193],[[[97,[-1]],[48,[-1]],5],7,193],[[[97,[-1]],[48,[-1]]],7,193],[[[97,[-1]]],7,193],[[[97,[-1]],17],7,193],[[[97,[-1]],-1],7,193],[[[97,[-1]],17],7,193],[[[97,[-1]],67],7,193],[[[97,[-1]],-1],7,193],[[[97,[-1]],-1],7,193],[[[97,[-1]],4],-1,193],[[[97,[-1]]],7,193],[[[97,[-1]]],-1,193],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],[[[97,[-1]],67],[[97,[-1]]],193],0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[194,[-1]]],[[194,[-1]]],195],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[194,[-1]]],-1,195],[[],[[194,[-1]]],[121,195]],[5,-1,[]],[5,-1,[]],[5,7],[[[194,[-1]]],7,195],[[[194,[-1]],14],15,[122,195]],[-1,-1,[]],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[[194,[-1]]],19,195],[[17,-1,17],[[194,[-1]]],195],[[[194,[-1]]],-1,195],[[[194,[-1]],[48,[-1]],5],7,195],[[[194,[-1]],[48,[-1]]],7,195],[[[194,[-1]]],7,195],[[[194,[-1]],17],7,195],[[[194,[-1]],-1],7,195],[[[194,[-1]],17],7,195],[[[194,[-1]],67],7,195],[[[194,[-1]],-1],7,195],[[[194,[-1]],-1],7,195],[[[194,[-1]],4],-1,195],[[[194,[-1]]],7,195],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],[[[194,[-1]],67],[[194,[-1]]],195],0,0,0,0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,[[10,[196,197]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[196,7],[5,7],[5,7],[[196,-1],7,[112,72]],[[196,14],15],[[197,14],15],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[196,19],[196,5],[196,5],[196,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[196,7],0,0,0,0,0,0,0,0,0,0,0,0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[5,[[83,[17]]]],[5,[[83,[17]]]],[[[48,[17]]],7],[[[48,[17]]],7],[5,[[83,[17]]]],[[[48,[17]]],7],[-1,-2,[],[]],[-1,-2,[],[]],[198,198],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,7],[[198,198],19],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[5,[[83,[17]]]],[[[48,[17]]],7],[[198,14],15],[-1,-1,[]],[-1,-1,[]],[5,[[83,[17]]]],[[[48,[17]]],7],[5,[[83,[17]]]],[[[48,[17]]],7],[[],5],[-1,-2,[],[]],[[[48,[17]],[48,[17]]],7],[5,[[83,[17]]]],[[[48,[17]]],7],[5,[[83,[17]]]],[[[48,[17]]],7],[5,[[83,[17]]]],[[[48,[17]]],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[[5,17],[[83,[17]]]],[[[48,[17]],17],7],[-1,11,[]],[-1,-2,[],[]],[5,[[83,[17]]]],[[[48,[17]]],7],0,0,0,0,0,0,0,0,[[-1,32],7,[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[67,67],[[-1,-2],7,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],67],[5,-1,[]],[5,-1,[]],[5,7],[[67,14],15],[-1,-1,[]],[-1,-1,[]],[17,17],[17,17],[[],5],[-1,-2,[],[]],[[17,17],17],[[17,17],17],[[17,17],17],[17,17],[17,17],[17,17],[17,17],[[17,17],17],[17,17],[17,17],[[17,17],17],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2,[9,[-2]]]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]]],"c":[],"p":[[8,"TransformMatrix",4762],[3,"App",4763],[3,"Model",9],[15,"u32"],[15,"usize"],[3,"Draw",4764],[15,"tuple"],[3,"Rect",4765],[3,"OutOfBounds",4766],[4,"Result",4767],[3,"TypeId",4768],[3,"Update",4769],[3,"AudioContext",97],[3,"Formatter",4770],[6,"Result",4770],[3,"AudioModel",123],[15,"f64"],[3,"Buffer",4771],[15,"bool"],[4,"NoteEvent",484],[4,"Option",4772],[3,"UIParams",1136],[3,"AudioPackage",174],[3,"AudioModelBuilder",174],[3,"AudioBuffers",225],[3,"AudioData",225],[3,"AudioGeneration",225],[3,"AudioProcessors",225],[3,"AudioSpectrograms",225],[3,"AudioMessageReceivers",225],[3,"AudioParams",423],[3,"Private",4773],[3,"NoteHandler",484],[3,"VoiceHandler",541],[4,"ExciterOscillator",846],[3,"Atomic",4774],[3,"Arc",4775],[3,"AtomicF64",3864],[4,"VoiceEvent",541],[3,"Receiver",4776],[3,"Voice",541],[15,"u64"],[4,"Generator",2584],[3,"AdsrEnvelope",1425],[15,"array"],[4,"WindowEvent",4769],[3,"ChordGen",641],[15,"slice"],[4,"Octave",681],[4,"Note",681],[15,"i32"],[4,"VirtualKeyCode",4777],[15,"u8"],[3,"String",4778],[4,"Scale",804],[4,"GenerativeAlgo",846],[4,"SmoothLifePreset",846],[4,"SpectrogramView",846],[4,"DistortionType",846],[4,"SmoothLifeSize",846],[4,"SpectrogramSize",846],[4,"SpectralFilterSize",846],[3,"Frame",4779],[3,"Delay",1253],[3,"RingBuffer",1290],[4,"InterpolationType",4458],[4,"SmoothingType",4717],[3,"StereoDelay",1330],[3,"Waveshaper",1390],[3,"RangeInclusive",4780],[8,"Fn",4781],[8,"Send",4782],[3,"AdsrParameters",1425],[4,"AdsrStage",1425],[3,"Compressor",1525],[4,"FilterType",1560],[3,"BiquadFilter",1604],[3,"BiquadParams",1604],[3,"FirCombFilter",1672],[3,"IirCombFilter",1672],[8,"Filter",1560],[3,"Box",4783],[3,"Vec",4784],[3,"FIRCoefficients",1737],[3,"IIRCoefficients",1737],[3,"RefCell",4785],[3,"Rc",4786],[3,"IIRHalfBandPolyphaseAllpassStructure",1814],[3,"FirstOrderFilter",1859],[3,"LinkwitzRileyFilter",1896],[3,"ResonatorBankParams",1929],[3,"ResoBankData",1929],[3,"ResonatorBank",1929],[3,"TwoPoleResonator",2037],[3,"StereoWrapper",2667],[3,"AudioUtility",2700],[3,"Smoother",4521],[4,"BallisticsLevelType",2075],[3,"BallisticsFilter",2075],[3,"DCFilter",2133],[3,"OnePoleLowpass",2163],[3,"StateVariableFilter",2196],[3,"Chorus",2231],[3,"OversamplingBuffer",2261],[3,"Oversampler",2261],[8,"FnOnce",4781],[3,"SpectralFilter",2326],[8,"StftInputMut",2421],[3,"SpectralMask",2356],[3,"StftHelper",2392],[8,"StftInput",2421],[8,"FnMut",4781],[3,"NoiseOsc",2446],[3,"Phasor",2471],[3,"SineOsc",2503],[3,"SquareOsc",2530],[3,"TriOsc",2557],[3,"DryWet",2625],[8,"Clone",4787],[8,"Effect",2663],[8,"Default",4788],[8,"Debug",4770],[4,"PanningLaw",2700],[3,"Contours",2778],[3,"Device",4789],[3,"InputData",3383],[3,"ContoursGPU",2817],[3,"AtomicU32",4790],[15,"f32"],[3,"AtomicF32",4791],[3,"Grid",2851],[3,"SmoothLifeGPU",2851],[3,"SmoothLife",2851],[3,"SLState",2851],[3,"SmoothLifeGenerator",2851],[3,"SmoothLifeGeneratorAsync",2851],[3,"Point",3039],[3,"Vectors",3039],[3,"Vec2",3864],[6,"Rgba",4792],[3,"Mutex",4793],[3,"VoronoiGPU",3114],[4,"UIComponentState",3155],[3,"Layout",4794],[15,"str"],[3,"Button",3196],[3,"Label",3238],[6,"Rgb",4792],[3,"Menu",3267],[8,"MenuEnum",3311],[3,"TextSlider",3315],[3,"SpectrumAnalyzer",3436],[6,"SpectrumOutput",3458],[3,"SpectrumInput",3458],[3,"UIComponents",3491],[3,"AudioMessageSenders",225],[3,"RwLock",4795],[3,"MaskUILayout",3530],[3,"ContourUILayout",3530],[3,"SmoothLifeUILayout",3530],[3,"VoronoiUILayout",3530],[3,"SpectrogramUILayout",3530],[3,"ResoBankUILayout",3530],[3,"LowFilterUILayout",3530],[3,"HighFilterUILayout",3530],[3,"DelayUILayout",3530],[3,"DistortionUILayout",3530],[3,"CompressionUILayout",3530],[3,"OtherUILayout",3530],[3,"UILayout",3530],[3,"f64x4",3864],[3,"DVec2",3864],[3,"AtomicU64",4790],[3,"IVec2",4796],[3,"UVec2",4796],[8,"IntoIterator",4797],[3,"BVec2",4798],[4,"Ordering",4790],[8,"Deserializer",4799],[3,"Vec3",4800],[3,"DVec3",4800],[3,"Error",4770],[3,"Vec3A",4800],[3,"Vec4",4801],[3,"XY",4802],[3,"DVec4",4801],[8,"Iterator",4803],[8,"PartialOrd",4804],[8,"SampleUniform",4805],[3,"i64x4",4806],[8,"Serializer",4807],[3,"f64x2",4808],[8,"Smoothable",4507],[3,"SmootherAtomic",4564],[8,"SmoothableAtomic",4507],[3,"ThreadPool",4606],[4,"PoolCreationError",4606],[4,"WindowType",4656],[13,"NoteOn",537],[13,"NoteOff",537],[3,"Rhythm16th",776],[8,"BitwiseRhythm16",776],[3,"Decimator",1371],[8,"Coefficients",1737],[3,"FilterDesign",1814],[8,"GeneratorProcessor",2427],[8,"DrawMask",3383],[8,"UIDraw",3383],[3,"V2",4377],[8,"SimdType",4415],[8,"SimdBuffer",4415],[8,"AtomicOps",4434]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
